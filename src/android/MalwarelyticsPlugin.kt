//
// Copyright 2020 Wultra s.r.o.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions
// and limitations under the License.
//

package com.wultra.android.cordova.malwarelytics.plugin

import com.wultra.android.antimalware.Antivirus
import com.wultra.android.antimalware.AntivirusConfig
import com.wultra.android.antimalware.SmartProtectionResult
import org.apache.cordova.CallbackContext
import org.apache.cordova.CordovaPlugin
import org.json.JSONArray
import org.json.JSONException
import kotlin.concurrent.thread

class MalwarelyticsPlugin : CordovaPlugin() {

    enum class Error {
        PLUGIN_UNKNOWN_ACTION,
        PLUGIN_ALREADY_INITIALIZED,
        PLUGIN_NOT_INITIALIZED,

        INITIALIZE_MISSING_CREDENTIALS,

        TRIGGER_SMART_PROTECTION_UPDATE_FAILED,
        TRIGGER_SMART_PROTECTION_FAILED,

        UTILS_LANG_CHANGE_FAILED
    }

    private var antivirus: Antivirus? = null

    @Throws(JSONException::class)
    override fun execute(action: String, args: JSONArray, callbackContext: CallbackContext): Boolean {
        
        if (action == "initialize") {
            val enableSilentMode = args.getBoolean(0)
            val onlineCheckIntervalHours = args.getInt(1)
            val updateOnInitialize = args.getBoolean(2)
            val clientId: String? = if(args.isNull(3)) {
                null
            } else {
                args.getString(3)
            }
            val lang: String? = if(args.isNull(3)) {
                null
            } else {
                args.getString(3)
            }
            this.initialize(enableSilentMode, updateOnInitialize, onlineCheckIntervalHours, clientId, lang, callbackContext)
            return true
        }

        if (action == "isInitialized") {
            this.isInitialized(callbackContext)
            return true
        }

        if (action == "triggerSmartProtection") {
            this.triggerSmartProtection(callbackContext)
            return true
        }

        if (action == "setClientId") {
            val clientId: String? = if(args.isNull(0)) {
                null
            } else {
                args.getString(0)
            }
            this.setClientId(clientId, callbackContext)
            return true
        }

        if (action == "changeAppLanguage") {
            val lang: String? = if(args.isNull(0)) {
                null
            } else {
                args.getString(0)
            }
            setLanguage(lang, callbackContext)
            return true
        }

        callbackContext.error(Error.PLUGIN_UNKNOWN_ACTION.name)

        return false
    }

    private fun isInitialized(callbackContext: CallbackContext? = null): Boolean {
        val result = this.antivirus?.isInitialized() ?: false
        callbackContext?.success(if (result) 1 else 0)
        return result
    }

    private fun initialize(enableSilentMode: Boolean,
                           updateOnInitialize: Boolean,
                           onlineCheckIntervalHours: Int,
                           clientId: String?,
                           lang: String?,
                           callbackContext: CallbackContext) {

        if (this.isInitialized()) {
            callbackContext.error(Error.PLUGIN_ALREADY_INITIALIZED.name)
            return
        }

        val username = MalwarelyticsConfig.USER_NAME
        val password = MalwarelyticsConfig.PASSWORD

        if (password == "" || username == "") {
            callbackContext.error(Error.INITIALIZE_MISSING_CREDENTIALS.name)
            return
        }

        val context = cordova.activity

        val builder = AntivirusConfig.Builder(context)
                        .smartProtectionConfig(
                            AntivirusConfig.SmartProtectionConfig.Builder()
                                .smartProtectionEnabled(true)
                                .silentModeEnabled(enableSilentMode)
                                .performInitialFirstUpdate(updateOnInitialize)
                                .smartProtectionIntervalHours(onlineCheckIntervalHours)
                                .build()
                        )
                        .apiUsername(username)
                        .apiPassword(password)

        MalwarelyticsConfig.API_PUBLIC_KEY?.let { builder.apiSignaturePublicKey(it) }

        val tmBuilder = AntivirusConfig.ThreatMitigationUIConfig.Builder()
        MalwarelyticsConfig.THEME?.let { tmBuilder.screenTheme(it) }
        MalwarelyticsConfig.NOTIFICATION_ICON?.let { tmBuilder.notificationSmallIcon(it) }
        MalwarelyticsConfig.SETTINGS_ICON?.let { tmBuilder.screenSettingsIcon(it) }
        MalwarelyticsConfig.DELETE_ICON?.let { tmBuilder.screenDeleteIcon(it) }
        lang?.let { tmBuilder.customLocalization(lang) }
        builder.threatMitigationUIConfig(tmBuilder.build())

        clientId?.let { builder.clientAppUserId(clientId) }

        val antivirus = Antivirus.getInstance()
        antivirus.initializeAsync(builder.build(), object : Antivirus.InitializationObserver {
            override fun onInitialized() {
                callbackContext.success()
            }
        })
        this.antivirus = antivirus
    }

    private fun setClientId(clientId: String?, callbackContext: CallbackContext) {

        if (!this.isInitialized()) {
            callbackContext.error(Error.PLUGIN_NOT_INITIALIZED.name)
            return
        }

        this.antivirus!!.getUpdateManager().updateClientAppUserId(clientId)
        callbackContext.success()
    }

    private fun setLanguage(language: String?, callbackContext: CallbackContext) {
        if (!this.isInitialized()) {
            callbackContext.error(Error.PLUGIN_NOT_INITIALIZED.name)
            return
        }
        if (language != null) {
            this.antivirus!!.getSmartProtectionManager().setCustomLocalization(language)
            callbackContext.success()
        } else {
            callbackContext.error(Error.UTILS_LANG_CHANGE_FAILED.name)
        }
    }

    private fun triggerSmartProtection(callbackContext: CallbackContext) {
        thread { 
            if (!this.isInitialized()) {
                callbackContext.error(Error.PLUGIN_NOT_INITIALIZED.name)
            } else {
                when (this.antivirus!!.getSmartProtectionManager().performSingleSmartProtectionUpdate()) {
                    SmartProtectionResult.COMPLETE_SUCCESS -> callbackContext.success()
                    SmartProtectionResult.UPDATE_FAILED -> callbackContext.error(Error.TRIGGER_SMART_PROTECTION_UPDATE_FAILED.name)
                    SmartProtectionResult.COMPLETE_FAILURE -> callbackContext.error(Error.TRIGGER_SMART_PROTECTION_FAILED.name)
                }
            }
        }
    }
}
