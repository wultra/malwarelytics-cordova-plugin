
class __MPService {
    private readonly pluginName = "MalwarelyticsPlugin";

    constructor() {}

    protected async callAsync<T>(name: string, ...args): Promise<T> {
      return await new Promise<T>((resolve, reject) => {
        cordova.exec((result: T)=> {
          resolve(result);
        }, (data: any) => {
          reject(new MalwarelyticsError(data as MalwarelyticsErrorType, ""))
        }, this.pluginName, name, args);
      });
    }

    protected call<T>(name: string, success: (result: T) => void, error: (err: MalwarelyticsError) => void, ...args) {
      cordova.exec(success, (data: any) => {
        if (error) {
          error(new MalwarelyticsError(data as MalwarelyticsErrorType, ""))
        }
      }, this.pluginName, name, args);
    }
  }


/**
 * Bridge for Malwarelytics for Android
 */
class __MPAndroidService extends __MPService {

    private readonly platform = "Android"
    private isAndroid: Boolean

    constructor() {
        super();
        this.isAndroid = window.cordova.platformId.toLowerCase() === "android";
    }

    protected async callAsync<T>(name: string, ...args): Promise<T> {
      if (!this.isAndroid) {
        console.log(`Invalid call to '${name}' on platform: ${window.cordova.platformId}`);
        return Promise.reject();
      }
      return await super.callAsync(name, ...args);
    }

    protected call<T>(name: string, success: (result: T) => void, error: (err: MalwarelyticsError) => void, ...args) {
      if (!this.isAndroid) {
        console.log(`Invalid call to '${name}' on platform: ${window.cordova.platformId}`);
        return;
      }
      super.call(name, success, error, ...args)
    }
  }



/**
 * Bridge for Malwarelytics for Apple
 */
class __MPAppleService extends __MPService {

  private readonly platform = "iOS"
  private isIos: Boolean

  constructor() {
      super();
      this.isIos = window.cordova.platformId.toLowerCase() === "ios";
  }

  protected async callAsync<T>(name: string, ...args): Promise<T> {
    if (!this.isIos) {
      console.log(`Invalid call to '${name}' on platform: ${window.cordova.platformId}`);
      return Promise.reject();
    }
    
    return await super.callAsync(name, ...args);
  }

  protected call<T>(name: string, success: (result: T) => void, error: (err: MalwarelyticsError) => void, ...args) {
    if (!this.isIos) {
      console.log(`Invalid call to '${name}' on platform: ${window.cordova.platformId}`);
      return;
    }

    super.call(name, success, error, ...args)
  }
}