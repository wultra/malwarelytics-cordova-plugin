/**
 * Malwarelytics RASP features for the Apple platforms.
 */
 class MalwarelyticsAppleRASP extends __MPAppleService {

    /** Adds observer that will be called when security event occures (for example when debugger connects). */
    setObserver(observer: MalwarelyticsAppleRASPObserver) {
        return this.call("setRaspCallback", (result: {type: AppleRaspCallbackType, payload: any}) => {
          switch (result.type) {
            case AppleRaspCallbackType.DEBUGGER:  {
              observer.debuggerDetected();
              break;
            }
            case AppleRaspCallbackType.JAILBREAK: {
              observer.jailbreakDetected();
              break;
            }
            case AppleRaspCallbackType.REPACKAGED: {
              observer.repackageDetected();
              break;
            }
            case AppleRaspCallbackType.HTTP_PROXY: {
              observer.httpProxyEnabled();
              break;
            }
            case AppleRaspCallbackType.SCREENSHOT_DETECTED: {
              observer.userScreenshotDetected();
              break;
            }
            case AppleRaspCallbackType.SCREEN_CAPTURE_CHANGED: {
              observer.screenCapturedChanged(result.payload as boolean);
              break;
            }
            case AppleRaspCallbackType.REVERSE_TOOLS: {
                observer.reverseEngineeringToolsDetected();
                break;
            }
            case AppleRaspCallbackType.DEVICE_PASSCODE_CHANGED: {
                observer.systemPasscodeConfigurationChanged(result.payload as boolean);
                break;
            }
            case AppleRaspCallbackType.DEVICE_BIOMETRY_CHANGED: {
                observer.systemBiometryConfigurationChanged(result.payload as boolean);
                break;
            }
            case AppleRaspCallbackType.VPN_CHANGED: {
                observer.vpnChanged(result.payload as boolean);
                break;
            }
            case AppleRaspCallbackType.ON_CALL_CHANGED: {
                observer.onCallChanged(result.payload as boolean);
                break;
            }
          }
        }, null);
      }
    
      async clearObserver(): Promise<void> {
        return await this.callAsync("clearRaspCallback");
      }

    /** If the device is Jailbroken. */
    async isDeviceJailbroken(): Promise<Boolean> {
        return await this.callAsync("isJailbroken");
    }

    /** If the app is being debugged. */
    async isDebuggerConnected(): Promise<Boolean> {
        return await this.callAsync("isDebuggerConnected");
    }

    /** If the app is signed with different signature. */
    async isRepackaged(): Promise<Boolean> {
        return await this.callAsync("isRepackaged");
    }

    /** True when reverse engineering tools are present. */
    async isReverseEngineeringToolsPresent(): Promise<Boolean> {
        return await this.callAsync("isReverseEngineeringToolsPresent");
    }

    /** If HTTP proxy is enabled in iOS Settings. */
    async isHttpProxyEnabled(): Promise<Boolean> {
        return await this.callAsync("isHttpProxyEnabled");
    }

    /** If the app is running on emulator. */
    async isEmulator(): Promise<Boolean> {
        return await this.callAsync("isEmulator");
    }

    /** If device screen is being captured. */
    async isScreenCaptured(): Promise<Boolean> {
        return await this.callAsync("isScreenCaptured");
    }

    /** If the user is using (has enrolled) biometry. */
    async isSystemBiometryEnabled(): Promise<Boolean> {
        return await this.callAsync("isSystemBiometryEnabled");
    }

    /** If the user has passcode enabled in the system (device lock). */
    async isSystemPasscodeEnabled(): Promise<Boolean> {
        return await this.callAsync("isSystemPasscodeEnabled");
    }

    /** If VPN is active on the device. */
    async isVpnActive(): Promise<Boolean> {
      return await this.callAsync("isVpnActive");
    }

    /** If there is active (phone) call. */
    async isOnCall(): Promise<Boolean> {
      return await this.callAsync("isOnCall")
    }
}

interface MalwarelyticsAppleRASPObserver {
    debuggerDetected(): void;
    jailbreakDetected(): void;
    repackageDetected(): void;
    httpProxyEnabled(): void;
    userScreenshotDetected(): void;
    screenCapturedChanged(isCaptured: boolean): void;
    reverseEngineeringToolsDetected(): void;
    systemPasscodeConfigurationChanged(enabled: boolean): void;
    systemBiometryConfigurationChanged(enabled: boolean): void;
    vpnChanged(active: boolean): void;
    onCallChanged(isOnCall: boolean): void;
}

enum AppleRaspCallbackType {
  DEBUGGER = "DEBUGGER",
  JAILBREAK = "JAILBREAK",
  REPACKAGED = "REPACKAGED",
  HTTP_PROXY = "HTTP_PROXY",
  SCREENSHOT_DETECTED = "SCREENSHOT_DETECTED",
  SCREEN_CAPTURE_CHANGED = "SCREEN_CAPTURE_CHANGED",
  REVERSE_TOOLS = "REVERSE_TOOLS",
  DEVICE_PASSCODE_CHANGED = "DEVICE_PASSCODE_CHANGED",
  DEVICE_BIOMETRY_CHANGED = "DEVICE_BIOMETRY_CHANGED",
  VPN_CHANGED = "VPN_CHANGED",
  ON_CALL_CHANGED = "ON_CALL_CHANGED"
}