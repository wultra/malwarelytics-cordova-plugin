
/** Configuration of the Malwarelytics SDK for the Android platform. */
interface MalwarelyticsAndroidConfig {
    
    /** ISO 639-1 language code that the app will be used for UI localization. */
    languageCode?: string;

    /** Antivirus component configuration. If not set, default values are used. */
    antivirusConfig?: MalwarelyticsAndroidAntivirusConfig;

    /** RASP component configuration. If not set, default values are used. */
    raspConfig?: MalwarelyticsAndroidRaspConfig;

    /** Configuration of customer grouping and naming in the Malwarelytics web console. */
    customerGrouping?: MalwarelyticsAndroidCustomerGroupingConfig;

    /** Configurre device fingerprinting. */
    fingerprint?: MalwarelyticsAndroidFingerprintType;
}

/** Configuration of customer grouping and naming in the Malwarelytics web console. */
interface MalwarelyticsAndroidCustomerGroupingConfig {
    /**
     * Set custom source package name.
     * The value has to match application credentials defined in the web application.
     *
     * Maximum length of the value is 255 characters.
     */
    sourcePackageName?: string;
    /**
     * Set app app package name to obtain extra granularity
     * of the information displayed in the web application.
     * Distinguishes application purposes or segmentation in one organization.
     *
     * Maximum length of the value is 255 characters.
     */
    appPackageName?: string;
    /**
     * Set audience group ID to obtain extra granularity
     * of the information displayed in the web application.
     * Distinguishes users from different customer systems (RETAIL, CORPORATE, ...).
     *
     * Maximum length of the value is 20 characters.
     */
    audienceGroupId?: string;
}

/**
 * Type of device fingerprinting performed.
 * NONE - Fingerprinting is completely turned off on all devices.
 *        No fingerprinting method is used. 
 * BASIC - Basic fingerprinting. 
 *         Fingerprinting uses only some fingerprinting methods. Only the methods that are safe on all devices.
 * SAFE - Safe fingerprinting. 
 *        Using full fingerprinting on non-problematic device.
 *        Using basic fingerprinting on problematic devices. Those are some Pixel devices with Android 14.
 * FULL - Full fingerprinting.
 *        Using all available fingerprinting methods.
 */
type MalwarelyticsAndroidFingerprintType = "NONE" | "BASIC" | "SAFE" | "FULL";

/** 
 * Antivirus component configuration for Android platform
 */
interface MalwarelyticsAndroidAntivirusConfig {

    /** Malwarelytics in silent mode does not show any UI. Default is true. */
    enableSilentMode?: boolean;
        
    /** How often will be antivirus database checked (hourly). Default is 48 hours. */
    onlineCheckIntervalHours?: number;

    /** If databse should be performend on SDK initialize. Default is true. */
    updateOnInitialize?: boolean;
}

/**
 * Runtime Application Self-Protection Configuration for Android platform
 */
interface MalwarelyticsAndroidRaspConfig {

    /** Emulator detection configuration. The default action is `NOTIFY`. */
    emulator?: MalwarelyticsAndroidDetectionConfig;

    /** Root detection configuration. The default action is `NOTIFY`. */
    root?: MalwarelyticsAndroidRootDetectionConfig;

    /** Debugger detection configuration. The default action is `NOTIFY`. */
    debugger?: MalwarelyticsAndroidDebuggerDetectionConfig;

    /** Repackaging detection configuration. The default action is `EXIT`. */
    repackage?: MalwarelyticsAndroidRepackageDetectionConfig;

    /** Screen sharing detection configuration. The default action is `NOTIFY`. */
    screenSharing?: MalwarelyticsAndroidDetectionConfig;

    /** Screenshot and screen recording blocking configuration. The default action is `BLOCK`. */
    screenshot?: MalwarelyticsAndroidBlockConfig;

    /** Screen reader blocking configuration. The default action is `BLOCK`. */
    screenReader?: MalwarelyticsAndroidScreenReaderBlockConfig;

    /** Process name handling configuraiton. The default value is `USE_STEALTHY`. */
    processName?: MalwarelyticsAndroidProcessNameConfig;

    /** Tapjacking block configuration. The default value is `BLOCK`. */
    tapjacking?: MalwarelyticsAndroidTapjackingBlockConfig;

    /** HTTP proxy detection configuration. The default action is `NOTIFY`. */
    httpProxy?: MalwarelyticsAndroidDetectionConfig;

    /** VPN detection configuration. The default action is `NOTIFY`. */
    vpn?: MalwarelyticsAndroidDetectionConfig;

    /** ADB detection configuration. The default action is `NOTIFY`. */
    adb?: MalwarelyticsAndroidAdbDetectionConfig;

    /** Active call detection configuration. The default action is `NOTIFY`. */
    activeCall?: MalwarelyticsAndroidSimpleDetectionConfig;

    /** App presence detection configuration. The default action is `NOTIFY`. */
    appPresence?: MalwarelyticsAndroidAppPresenceDetectionConfig;
}

/** Data that describes Android APK. */
interface Apk {
    packageName: string;
    signatureHash?: string;
}

/** Configuration of the basic detection behavior */
interface MalwarelyticsAndroidDetectionConfig {
    /** Behavior of the detection */
    action: MalwarelyticsAndroidDetectionAction;
    /** This URL will be open in the default browser when app is terminated in case that the `action` is `EXIT`. */
    exitUrl?: string;
}

/** Configuration of the root detection behavior */
interface MalwarelyticsAndroidRootDetectionConfig {
    /** Behavior of the detection */
    action: MalwarelyticsAndroidDetectionAction;
    /** This URL will be open in the default browser when app is terminated in case that the `action` is `EXIT`. */
    exitUrl?: string;
    /** Minimum confidence value of heuristic root detections that triggers app termination. */
    exitOnRootMinConfidence?: number;
}


/** Configuration of the debugger detection behavior */
interface MalwarelyticsAndroidDebuggerDetectionConfig {
    /** Behavior of the detection */
    action: MalwarelyticsAndroidDetectionAction;
    /** This URL will be open in the default browser when app is terminated in case that the `action` is `EXIT`. */
    exitUrl?: string;
    /** Minimum confidence value of heuristic root detections that triggers app termination. */
    debuggerTypes?: DebuggerType[];
}

/** Configuration of the repackage detection behavior */
interface MalwarelyticsAndroidRepackageDetectionConfig {
    /** Behavior of the detection */
    action: MalwarelyticsAndroidDetectionAction;
    /** This URL will be open in the default browser when app is terminated in case that the `action` is `EXIT`. */
    exitUrl?: string;
    /** Base64-encoded SHA-1 of signing certificate(s). One or more values can be set. */
    signatureHash?: string[];
}

/** Configuration of the basic block behavior */
interface MalwarelyticsAndroidBlockConfig {
    /** Behavior of the detection */
    action: MalwarelyticsAndroidBlockAction;
}

/** Configuration of the screen readers block behavior */
interface MalwarelyticsAndroidScreenReaderBlockConfig {
    /** Behavior of the detection */
    action: MalwarelyticsAndroidBlockAction;
    /** Defines collection of allowed screen readers. It is empty by default. */
    allowedScreenReaders?: Apk[];
}

/** Configuration of the process name handling */
interface MalwarelyticsAndroidProcessNameConfig {
    /** Behavior of the handling */
    action: MalwarelyticsAndroidProcessNameAction;
    /** Sets custom name to be used for the app process name. When not set a random name is used. */
    customProcessName?: string;
}

/** Configuration of the tapjacking block behavior */
interface MalwarelyticsAndroidTapjackingBlockConfig {
    /** Behavior of the handling */
    action: MalwarelyticsAndroidBlockAction;

    /** 
     * Defines sensitivity for blocking tapjacking. The default value is ThreatIndex.HIGHLY_DANGEROUS. 
     */
    blockTapjackingSensitivity?: ThreatIndex;

    /**
     * Define whether to ignore system apps in blocking tapjacking. The default value is false
     */
    ignoreTapjackingSystemApps?: boolean;

    /**
     * List of allowed tapjacking-capable apps.
     * 
     * Used for fine-tuning tapjacking protection.
     * It enables to ignore apps that are capable of tapjacking.
     * Use to get rid of false-positives.
     */
    allowedTapjackingApps?: Apk[];
}

/** Configuration of the adb detection behavior */
interface MalwarelyticsAndroidAdbDetectionConfig {
    /** Behavior of the detection */
    action: MalwarelyticsAndroidAdbDetectionAction;
    /** This URL will be open in the default browser when app is terminated in case that the `action` is `EXIT`. */
    exitUrl?: string;
}

/** Configuration of the simple detection behavior */
interface MalwarelyticsAndroidSimpleDetectionConfig {
    /** Behavior of the detection */
    action: MalwarelyticsAndroidSimpleDetectionAction;
}

/** Configuration of the app presence detection behavior */
interface MalwarelyticsAndroidAppPresenceDetectionConfig {
    /** Behavior of the detection */
    action: MalwarelyticsAndroidAdbDetectionAction;
    /** This URL will be open in the default browser when app is terminated in case that the `action` is `EXIT`. */
    exitUrl?: string;
    /** List of apps that the SDK is looking for. */
    remoteDesktopApps?: MalwarelyticsAndroidNamedApkItem[];
}

/** Configuration of app the presence of which should be checked. */
interface MalwarelyticsAndroidNamedApkItem {
    /** Defined custom name to be used for the application. */
    displayName: String;
    /** Package name (application ID) of the app. */
    packageName: String;
    /** SHA-1 hash of the app's signature. The signature hash is optional. */
    signatureHash?: String;
}

/**
 * NO_ACTION - do nothing
 * NOTIFY - notify via the observer
 * EXIT - exit the app
 */
type MalwarelyticsAndroidDetectionAction = "NO_ACTION" | "NOTIFY" | "EXIT";

/**
 * NO_ACTION - do nothing
 * BLOCK - block
 */
type MalwarelyticsAndroidBlockAction = "NO_ACTION" | "BLOCK";

/**
 * NO_ACTION - do nothing
 * USE_STEALTHY - use stealthy process name
*/
type MalwarelyticsAndroidProcessNameAction = "NO_ACTION" | "USE_STEALTHY";

/**
 * NOTIFY - notify via the observer
 * EXIT - exit the app
 */
type MalwarelyticsAndroidAdbDetectionAction = "NOTIFY" | "EXIT";


/**
 * NO_ACTION - do nothing
 * NOTIFY - notify via the observer
 */
type MalwarelyticsAndroidSimpleDetectionAction = "NO_ACTION" | "NOTIFY";