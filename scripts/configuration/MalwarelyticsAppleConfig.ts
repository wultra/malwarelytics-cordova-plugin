/** Configuration of the Malwarelytics SDK for the Apple platform. */
interface MalwarelyticsAppleConfig {
    /** 
     * RASP component configuration. If not set, default values are used. 
     */
    raspConfig?: MalwarelyticsAppleRaspConfig;
    /** 
     * Configuration for the online Malwarelytis service. 
     * The default value is `null` which means that by default Malwarelytics does not connect to the online service. 
     */
    onlineConfig?: MalwarelyticsAppleOnlineConfig;
}

/**
 * Configuration for the online Malwarelytics service.
 */
interface MalwarelyticsAppleOnlineConfig {
    /** 
     * Configuration of the events that are sent to the server. 
     */
    eventsConfig?: MalwarelyticsAppleEventConfig;
    /** 
     * Configuration of customer grouping and naming in the Malwarelytics web console. 
     */
    customerGrouping?: MalwarelyticsAppleCustomerGroupingConfig;
}

/** Configuration of the events collection. */
interface MalwarelyticsAppleEventConfig {
    /** Way to disable event collection in general. The default value is `true`. */
    enableEventCollection?: boolean;
    /** Event will be reported when user takes a screenshot. The default value is `true`. */
    enableScreenshotTakenCollection?: boolean;
}

/** Configuration of customer grouping and naming in the Malwarelytics web console. */
interface MalwarelyticsAppleCustomerGroupingConfig {
    /**
     * Set custom source bundle identifier.
     * The value has to match application credentials defined in the web application.
     *
     * Maximum length of the value is 255 characters.
     */
    sourceBundleId?: string;
    /**
     * Set app bundle identifier to obtain extra granularity
     * of the information displayed in the web application.
     * Distinguishes application purposes or segmentation in one organization.
     *
     * Maximum length of the value is 255 characters.
     */
    appBundleId?: string;
    /**
     * Set audience group ID to obtain extra granularity
     * of the information displayed in the web application.
     * Distinguishes users from different customer systems (RETAIL, CORPORATE, ...).
     *
     * Maximum length of the value is 20 characters.
     */
    audienceGroupId?: string;
}

/** Configuration of the RASP features on the Apple platforms */
interface MalwarelyticsAppleRaspConfig {
    /** Jailbreak detection configuration. The default action is `NOTIFY`. */
    jailbreak?: MalwarelyticsAppleDetectionConfig;
    /** Debugger detection configuration. The default action is `NOTIFY`. */
    debugger?: MalwarelyticsAppleDebuggerDetectionConfig;
    /** everse engineering tools presence detection configuration. The default action is `NOTIFY`. */
    reverseEngineeringTools?: MalwarelyticsAppleDetectionConfig;
    /** HTTP proxy detection configuration. The default action is `NOTIFY`. */
    httpProxy?: MalwarelyticsAppleDetectionConfig;
    /** Repackaging detection configuration. The default action is `NO_ACTION` with empty array of certificates. */
    repackage?: MalwarelyticsAppleRepackageConfig;
    /** Screen capturing detection. The default action is `NOTIFY`. */
    screenCapture?: MalwarelyticsAppleScreenCaptureDetectionConfig;
    /** VPN active detection. The default value is `NOTIFY`. */
    vpnChanged?: MalwarelyticsAppleDetectionConfig;
    /** Call detection. The default value is `NOTIFY`. */
    callDetection?: MalwarelyticsAppleSimpleDetectionConfig;
}

/** Configuration of the debugger detection behavior */
interface MalwarelyticsAppleDebuggerDetectionConfig {
    /** Behavior of the debugger detection */
    action: MalwarelyticsAppleDebuggerDetectionAction;
    /** This URL will be open in the default browser when app is terminated in case that the `action` is `EXIT`. */
    exitUrl?: string;
}

/** Configuration of the repackaging detection behavior */
interface MalwarelyticsAppleRepackageConfig {
    /** Behavior of the repackaging detection */
    action: MalwarelyticsAppleDetectionAction;
    /** 
     * Trusted certificates for ad-hoc or enterprise distribution.
     * 
     * This is needed only for non-production distribution.
     * 
     * How to retrieve the certificate:
     * 1. Open the Keychain Access application.
     * 2. Find a certificate that will be used to sign your application, for example, “Apple Development: Jan Tester (c)”.
     * 3. Right-click on the item and click “Export…”.
     * 4. Export the certificate in the .cer format.
     * 5. Open up the terminal and cd into the folder with your exported certificate.
     * 6. Encode the certificate in Base64 with cat your_exported.cer | base64.
     */
    base64EncodedTrustedCertificates?: string[];
    /** This URL will be open in the default browser when app is terminated in case that the `action` is `EXIT`. */
    exitUrl?: string;
}

interface MalwarelyticsAppleScreenCaptureDetectionConfig {
    /** Behavior of the detection */
    action: MalwarelyticsAppleScreenCaptureDetectionAction;
    /** This URL will be open in the default browser when app is terminated in case that the `action` is `EXIT`. */
    exitUrl?: string;
    /** Overlay that will be displayed when screen capture is detected in case that the `action` is `HIDE`. */
    overlay?: MalwarelyticsAppleOverlay;
}

/** Configuration of the basic detection behavior */
interface MalwarelyticsAppleDetectionConfig {
    /** Behavior of the detection */
    action: MalwarelyticsAppleDetectionAction;
    /** This URL will be open in the default browser when app is terminated in case that the `action` is `EXIT`. */
    exitUrl?: string;
}

/** Configuration of the simple detection behavior */
interface MalwarelyticsAppleSimpleDetectionConfig {
    /** Behavior of the detection */
    action: MalwarelyticsAppleSimpleDetectionAction;
}

/** Configuration of the overlay */
interface MalwarelyticsAppleOverlay {
    type: MalwarelyticsAppleOverlayType;
    color?: MalwarelyticsAppleColor;
    image?: MalwarelyticsAppleImage;
}
/**
 * NO_ACTION - do nothing
 * NOTIFY - notify via the observer
 * BLOCK - block the debugger
 * EXIT - exit the app
 */
type MalwarelyticsAppleDebuggerDetectionAction = "NO_ACTION" | "NOTIFY" | "BLOCK" | "EXIT";

/**
 * NO_ACTION - do nothing
 * NOTIFY - notify via the observer
 * HIDE - hide app's content with overlay when screen capture is detected
 * EXIT - exit the app
 */
type MalwarelyticsAppleScreenCaptureDetectionAction = "NO_ACTION" | "NOTIFY" | "HIDE" | "EXIT";

/**
 * NO_ACTION - do nothing
 * NOTIFY - notify via the observer
 * EXIT - exit the app
 */
type MalwarelyticsAppleDetectionAction = "NO_ACTION" | "NOTIFY" | "EXIT";

/**
 * NO_ACTION - do nothing
 * NOTIFY - notify via the observer
 */
type MalwarelyticsAppleSimpleDetectionAction = "NO_ACTION" | "NOTIFY"

/**
 * DEFAULT - default cover with solid color and application icon
 * COLOR - cover with a solid color
 * IMAGE - cover with an image
 */
type MalwarelyticsAppleOverlayType = "DEFAULT" | "COLOR" | "IMAGE";

/**
 * UIColor abstraction for configuration
 */
interface MalwarelyticsAppleColor {
    red: number;
    green: number;
    blue: number;
    alpha: number;
}

/**
 * UIImage abstraction for configuration
 */
interface MalwarelyticsAppleImage {
    name: string;
}