/**
 * Javascript wrapper around native kotlin malwarelytics code.
 * Malwarelytics plugin can be accessed in cordova app via `window.plugins.malwarelytics` property.
 */
class MalwarelyticsPlugin extends __MPService {

  /** Features for antivirus component. */
  readonly antivirus = new Antivirus();

  /** Features for RASP component. */
  readonly rasp = new Rasp();

  /**
   * If the malwarelytics are initialized.
   */
  async isInitialized(): Promise<boolean> {
    return await this.callAsync("isInitialized");
  }

  /**
   * Initializes themalwarelytics with provided configuration.
   * Note that username and password needs to be set inside the plugin kotlin file MalwarelyticsCredentials.kt
   * 
   * @param config Configuration file
   */
  async initialize(config: MalwarelyticsConfig): Promise<void> {
    const stringified = JSON.stringify(config);
    return await this.callAsync("initialize", stringified);
  }

  /**
   * Sets new clinet id that will be sent to the backend for user identification.
   * Pass null to remove the current client id (for example when user logged-out).
   * 
   * @param clientId Client id. Null for deleting the value
   */
  async setClientId(clientId: string): Promise<void> {
    return await this.callAsync("setClientId", clientId);
  }

  // - UTIL METHODS --

  /**
   * Utility helper method that changes to language of the Malwarelytics UI.
   * The language code follows the ISO 639-1 standard.
   * 
   * Note that the language configuration is not persisted and you'll need to set it 
   * every time the app is started.
   * 
   * @param language ISO 639-1 language code
   */
  async changeAppLanguage(language: string): Promise<void> {
    return await this.callAsync("changeAppLanguage", language);
  }
}

class Antivirus extends __MPService {
  
  constructor() {
    super()
  }

  /**
   * Schedules a job that will execute smart protection run. Note that this is asynchronous and
   * can take some time.
   */
  async triggerSmartProtection(): Promise<void> {
    return await this.callAsync("triggerSmartProtection");
  }

  /**
   * Returns list of all applications with the malware evaluation.
   */
   async getThreatList(): Promise<{items: ApkThreat[]}> {
    return await this.callAsync("getThreatList");
  }

  /**
   * Gets more information for the package name of the application.
   * 
   * @param packageName Package name of the application
   */
  async getApkInfo(packageName: String): Promise<ApkInfo> {
    return await this.callAsync("getApkInfo", packageName);
  }
}

class Rasp extends __MPService {

  constructor() { super() }

  setObserver(callback: (any) => void) {
    return this.call("setRaspCallback", callback, null);
  }

  async clearObserver(): Promise<void> {
    return await this.callAsync("clearRaspCallback");
  }

  async getRootDetection(): Promise<RootDetection> {
    return await this.getInfo(__MPRaspRetection.ROOT_DETECTION);
  }

  async isDeviceRooted(): Promise<Boolean> {
    return await this.getBoolState(__MPRaspRetection.IS_ROOTED);
  }

  async getEmulatorDetection(): Promise<EmulatorDetection> {
    return await this.getInfo(__MPRaspRetection.EMULATOR_INFO);
  }

  async isDeviceEmulator(): Promise<Boolean> {
    return await this.getBoolState(__MPRaspRetection.IS_EMULATOR);
  }

  async getDebuggerDetection(): Promise<DebuggerDetection> {
    return await this.getInfo(__MPRaspRetection.DEBUGGER_INFO);
  }

  async isDebuggerAttached(): Promise<Boolean> {
    return await this.getBoolState(__MPRaspRetection.IS_DEBUGGER);
  }

  async getAppRepackaged(): Promise<RepackagingResult> {
    return await this.getInfo(__MPRaspRetection.REPACKAGE_INFO);
  }

  async getScreenSharingDetection(): Promise<ScreenSharingDetection> {
    return await this.getInfo(__MPRaspRetection.SCREEN_SHARED_INFO);
  }

  async isScreenShared(): Promise<Boolean> {
    return await this.getBoolState(__MPRaspRetection.IS_SCREEN_SHARED);
  }

  async isDeviceUsingScreenLock(): Promise<Boolean> {
    return await this.getBoolState(__MPRaspRetection.SCREEN_LOCK_ENABLED);
  }

  async isPlayProtectEnabled(): Promise<Boolean> {
    return await this.getBoolState(__MPRaspRetection.PLAY_PROTECT_ENABLED);
  }

  async isNotAllowedScreenReaderEnabled(): Promise<Boolean> {
    return await this.getBoolState(__MPRaspRetection.NOT_ALLOWED_SCREEN_READER_ENABLED);
  }

  private async getInfo<T>(detection: __MPRaspRetection): Promise<T> {
    return await this.callAsync("raspInfo", detection);
  }

  private async getBoolState(detection: __MPRaspRetection): Promise<Boolean> {
    const result: number = await this.callAsync("raspInfo", detection);
    return result == 1;
  }
}

declare var module: any; // global variable passed by cordova
module.exports = new MalwarelyticsPlugin();
