/**
 * Javascript wrapper around native kotlin malwarelytics code.
 * Malwarelytics plugin can be accessed in cordova app via `window.plugins.malwarelytics` property.
 */
class MalwarelyticsPlugin {

  readonly pluginName = "MalwarelyticsPlugin";

  /**
   * If the malwarelytics are initialized.
   * @param success Returns the result
   * @param error Called on error
   */
  isInitialized(success: successCallback<boolean>, error: errorCallback = null) {
    cordova.exec((data: number) => { success(data === 1) }, this.createFailCallback(error), this.pluginName, "isInitialized");
  }

  /**
   * Initializes themalwarelytics with provided configuration.
   * Note that username and password needs to be set inside the plugin kotlin file MalwarelyticsCredentials.kt
   * 
   * @param config Configuration file
   * @param success When the configuration was success
   * @param error Called on error
   */
  initialize(config: MalwarelyticsConfig, success: successCallback = null, error: errorCallback = null) {
    const cfg: MalwarelyticsConfig = {
      enableSilentMode: true,
      onlineCheckIntervalHours: 48,
      updateOnInitialize: true,
      ...config
    };
    cordova.exec(success, this.createFailCallback(error), this.pluginName, "initialize", [cfg.enableSilentMode, cfg.onlineCheckIntervalHours, cfg.updateOnInitialize, cfg.clientId, cfg.languageCode]);
  }

  /**
   * Schedules a job that will execute smart protection run. Note that this is asynchronous and
   * can take some time.
   * 
   * @param success When the job was scheduled
   * @param error Called on error
   */
  triggerSmartProtection(success: successCallback = null, error: errorCallback = null) {
    cordova.exec(success, this.createFailCallback(error), this.pluginName, "triggerSmartProtection");
  }

  /**
   * Sets new clinet id that will be sent to the backend for user identification.
   * Pass null to remove the current client id (for example when user logged-out).
   * 
   * @param clientId Client id. Null for deleting the value
   * @param success When the id was set
   * @param error Called on error
   */
  setClientId(clientId: string, success: successCallback = null, error: errorCallback = null) {
    cordova.exec(success, this.createFailCallback(error), this.pluginName, "setClientId", [clientId]);
  }

  // - UTIL METHODS --

  /**
   * Utility helper method that changes to language of the Malwarelytics UI.
   * The language code follows the ISO 639-1 standard.
   * 
   * Note that the language configuration is not persisted and you'll need to set it 
   * every time the app is started.
   * 
   * @param language ISO 639-1 language code
   * @param success When language change was success
   * @param error  When language change failed
   */
  changeAppLanguage(language: string, success: successCallback = null, error: errorCallback = null) {
    cordova.exec(success, this.createFailCallback(error), this.pluginName, "changeAppLanguage", [language]);
  }

  // -- INTERNALS --
  
  //
  private createFailCallback(error: errorCallback): (data: any) => void {
    return (data: any) => {
      if (error) {
        error(new MalwarelyticsError(data as MalwarelyticsErrorType, ""))
      }
    }
  }

}

type successCallback<T = void> = (result: T) => void;
type errorCallback = (err: MalwarelyticsError) => void;

declare var module: any; // global variable passed by cordova
module.exports = new MalwarelyticsPlugin();
