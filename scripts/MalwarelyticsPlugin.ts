/**
 * JavaScript wrapper around native kotlin/swift Malwarelytics code.
 * Malwarelytics plugin can be accessed in cordova app via `window.plugins.malwarelytics` property.
 */
class MalwarelyticsPlugin extends __MPService {

  /** Features for the Android platform. */
  readonly android = new MalwarelyticsAndroid();

  /** Features for the Apple platforms. */
  readonly apple = new MalwarelyticsApple();

  /**
   * If the malwarelytics are initialized.
   */
  async isInitialized(): Promise<boolean> {
    return await this.callAsync("isInitialized");
  }

  /**
   * Initializes Malwarelytics with provided configuration.
   * Note that username and password needs to be set inside the plugin kotlin file MalwarelyticsCredentials.kt
   * 
   * @param config Configuration file
   */
  async initialize(config: MalwarelyticsConfig): Promise<void> {
    const stringified = JSON.stringify(config);
    return await this.callAsync("initialize", stringified);
  }

  /**
   * Sets new client id that will be sent to the backend for user identification.
   * Pass null to remove the current client id (for example when user logged-out).
   * 
   * @param clientId Client id. Null for deleting the value
   */
   async setClientId(clientId: string): Promise<void> {
    return await this.callAsync("setClientId", clientId);
  }

  /**
   * Sets new device id that will be sent to the backend for user identification.
   * Pass null to remove the current device id.
   * 
   * @param deviceId Device id. Null for deleting the value
   */
   async setDeviceId(deviceId: string): Promise<void> {
    return await this.callAsync("setDeviceId", deviceId);
  }
}

declare var module: any; // global variable passed by cordova
module.exports = new MalwarelyticsPlugin();
