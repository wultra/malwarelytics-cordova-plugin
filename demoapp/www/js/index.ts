/// <reference path="../../plugins/cordova-plugin-malwarelytics/www/MalwarelyticsPlugin.d.ts"/>

var demoApp = {
    
    // Application Constructor
    initialize() {
        document.addEventListener('deviceready', this.onDeviceReady.bind(this), false);
    },

    onDeviceReady() {

        var parentElement = document.getElementById("deviceready");
        var preparingElement = parentElement.querySelector('.preparing');
        var readyElement = parentElement.querySelector('.ready');
        var failedElement = parentElement.querySelector('.failed');
        
        var button = document.getElementById("smart-protection-button");
        var userIdButton = document.getElementById("set-user-id-button");
        button.setAttribute('style', 'display:inline-block');
        userIdButton.setAttribute('style', 'display:inline-block');
        button.addEventListener("click", this.onRunSmartProtection);
        userIdButton.addEventListener("click", this.onChangeClientId);

        var langSelect = document.getElementById("lang-select");
        langSelect.addEventListener("change", (e: any) => {
            window.plugins.malwarelytics.changeAppLanguage(e.target.value, () => {
                window.plugins.toast.showShortCenter(`Language echanged to ${e.target.value}`);
            }, (error) => {
                window.plugins.toast.showShortCenter(`Failed to change language: ${error.type}`);
            })
        })

        window.plugins.malwarelytics.isInitialized((isInitialized) => {
            console.log(`Is initialized: ${isInitialized}`)
        }, (error) => {
            console.log(error)
        })
        
        window.plugins.malwarelytics.initialize({
            enableSilentMode: false,
            languageCode: "en"
        }, () => {

            preparingElement.setAttribute('style', 'display:none;');
            readyElement.setAttribute('style', 'display:block;');
            console.log("initialized");
            window.plugins.toast.showShortCenter("Malwarelytics initialized");

            window.plugins.malwarelytics.getThreatList((list) => {
                console.log(list);
            })

        }, (error) => {
            preparingElement.setAttribute('style', 'display:none;');
            failedElement.setAttribute('style', 'display:block;');
            console.log(error)
            window.plugins.toast.showShortCenter(error.type)
        });
    },

    onRunSmartProtection() {
        window.plugins.toast.showShortCenter("Smart Protection job is in progres...")
        window.plugins.malwarelytics.triggerSmartProtection(() => {
            window.plugins.toast.showShortCenter("Smart Protection finished...")
        }, (error) => {
            window.plugins.toast.showShortCenter(error.type)
        });
    },

    onChangeClientId() {
        navigator.notification.prompt("Client ID helps you to identify a user within your organization.", (result) => {
            if (result.buttonIndex == 1) { // 1 based indexing, lol
                window.plugins.malwarelytics.setClientId(result.input1 == "" ? null : result.input1 as string, null, (error) => {
                    window.plugins.toast.showShortCenter(error.type)
                })
            }
        }, "Set Client ID", ["OK", "CLOSE"])
    }
};

demoApp.initialize();

// to make typescript happy

declare interface Window {
    plugins: {
        malwarelytics: MalwarelyticsPlugin;
        toast: any;
    }
}

declare interface Navigator {
    notification: any;
}