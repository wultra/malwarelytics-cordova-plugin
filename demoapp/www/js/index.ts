/// <reference path="../../plugins/cordova-plugin-malwarelytics/www/MalwarelyticsPlugin.d.ts"/>
/// <reference path="../../plugins/cordova-plugin-device/types/index.d.ts"/>

enum AppState {
    READY,
    PREPARING,
    FAILED
}

enum Platform {
    NONE,
    IOS,
    ANDROID
}

var demoApp = {
    
    // Application Constructor
    initialize() {
        this.displayPlatformUI(Platform.NONE);
        document.addEventListener('deviceready', this.onDeviceReady.bind(this), false);
    },

    async onDeviceReady() {

        try {
            let knownApps;
            if (device.platform == "iOS") {
                knownApps = await window.plugins.malwarelytics.apple.getKnownDetectableApps();
            }
            await window.plugins.malwarelytics.initialize({
                clientId: "clientIdTest",
                deviceId: "deviceIdTest",
                androidConfig: {
                    languageCode: "en",
                    antivirusConfig: {
                        enableSilentMode: false
                    },
                    raspConfig: {
                        root: {
                            action: "NOTIFY",
                            exitUrl: "https://wultra.com"
                        }
                    }
                },
                appleConfig: {
                    raspConfig: {
                        debugger: {
                            action: "NOTIFY",
                            exitUrl: "https://wultra.com"
                        },
                        appPresence: {
                            action: "NOTIFY",
                            apps: knownApps
                        },
                        screenCapture: {
                            action: "HIDE",
                            overlay: {
                                type: "COLOR",
                                color: {
                                    red: 220,
                                    green: 50,
                                    blue: 50,
                                    alpha: 255
                                },
                                image: {
                                    name: "AppIcon"
                                }
                            }
                        }
                    }
                }
            });
        } catch(e) {
            this.setAppState(AppState.FAILED);
            console.error(e);
            return
        }
        
        this.setAppState(AppState.READY);

        let customerIdentification = document.getElementById("customer-identification");
        customerIdentification.setAttribute('style', 'display:inline-block');
        this.setButtonClick("set-user-id-button", this.onChangeClientId);
        this.setButtonClick("set-device-id-button", this.onChangeDeviceId);

        if (device.platform == "Android") {
            this.configureAndroid();
        } else if (device.platform == "iOS") {
            this.configureIOS();
        } else {
            alert("Unsupported platform");
        }
    },

    async configureIOS() {
        this.displayPlatformUI(Platform.IOS);

        let isOnline = await window.plugins.malwarelytics.apple.isOnline();
        this.setIosState(isOnline);

        this.setButtonClick("jailbreak-button", async () => {
            alert("Is Jailbroken: " + await window.plugins.malwarelytics.apple.rasp.isDeviceJailbroken());
        });
        this.setButtonClick("debugger-button", async () => {
            alert("Is Debugger Connected: " + await window.plugins.malwarelytics.apple.rasp.isDebuggerConnected());
        });
        this.setButtonClick("repackaged-button", async () => {
            alert("Is Repackaged: " + await window.plugins.malwarelytics.apple.rasp.isRepackaged());
        });
        this.setButtonClick("reversetools-button", async () => {
            alert("Reverse Tools Installed: " + await window.plugins.malwarelytics.apple.rasp.isReverseEngineeringToolsPresent());
        });
        this.setButtonClick("httpproxy-button", async () => {
            alert("Is HTTP proxy on: " + await window.plugins.malwarelytics.apple.rasp.isHttpProxyEnabled());
        });
        this.setButtonClick("emulator-button", async () => {
            alert("Is Emulator: " + await window.plugins.malwarelytics.apple.rasp.isEmulator());
        });
        this.setButtonClick("screencapture-button", async () => {
            alert("Is Screen Captured: " + await window.plugins.malwarelytics.apple.rasp.isScreenCaptured());
        });
        this.setButtonClick("devicelock-button", async () => {
            alert("Is Device Lock On: " + await window.plugins.malwarelytics.apple.rasp.isSystemPasscodeEnabled());
        });
        this.setButtonClick("biometry-button", async () => {
            alert("Is Biometry On: " + await window.plugins.malwarelytics.apple.rasp.isSystemBiometryEnabled());
        });
        this.setButtonClick("vpn-active", async () => {
            alert("Is VPN Active: " + await window.plugins.malwarelytics.apple.rasp.isVpnActive());
        });
        this.setButtonClick("on-call", async () => {
            alert("Is On Call: " + await window.plugins.malwarelytics.apple.rasp.isOnCall());
        });
        this.setButtonClick("apps-presence", async () => {
            alert("Installed apps: " + JSON.stringify(await window.plugins.malwarelytics.apple.rasp.installedApps()));
        });

        let observer: MalwarelyticsAppleRASPObserver = {
            debuggerDetected() { alert("Debugger detected ") },
            jailbreakDetected() { alert("Jailbreak detected") },
            repackageDetected() { alert("Repackaging detected") },
            httpProxyEnabled() { alert("HTTP proxy detected") },
            userScreenshotDetected() { alert("Screenshot detected") },
            screenCapturedChanged(isCaptured: boolean) { alert("Screen capture changed to " + isCaptured) },
            reverseEngineeringToolsDetected() { alert("Reverse Engineering Tools Detedted") },
            systemPasscodeConfigurationChanged(enabled: boolean) { alert("Device Passcode changed to " + enabled) },
            systemBiometryConfigurationChanged(enabled: boolean) { alert("Device Biometry changed to " + enabled) },
            vpnChanged(active: boolean) { alert("VPN changed: " + active) },
            onCallChanged(isOnCall: boolean) { alert("OnCall: " + isOnCall) },
            installedAppsChanged(installedApps: MalwarelyticsAppleDetectableApp[]) { alert("installedAppsChanged: " + JSON.stringify(installedApps)) }
        }

        window.plugins.malwarelytics.apple.rasp.setObserver(observer);
    },

    async configureAndroid() {
        this.displayPlatformUI(Platform.ANDROID);

        let result = await window.plugins.malwarelytics.android.getInitializationResult();
        this.setAndroidState(result);

        let avFeatures = document.getElementById("av-features");
        avFeatures.setAttribute('style', 'display:inline-block');
        this.setButtonClick("smart-protection-button", this.onRunSmartProtection);

        this.setButtonClick("last-update-info-button", async () => {
            alert("last update info: " + JSON.stringify(await window.plugins.malwarelytics.android.antivirus.getLastUpdateInfo()));
        })

        let updateObserver: MalwarelyticsAndroidUpdateObserver = {
            onSuggestionUpdated(observedUpdateInfo: ObservedUpdateInfo) {
                const filter = observedUpdateInfo.updateType === "FULL" ? ['updateResult', 'updateType', 'failureReason'] : ['updateResult', 'updateType', 'failureReason', 'checkedApps'];
                const filteredUpdateInfo = JSON.stringify(observedUpdateInfo, filter)
                console.log("Update observer: " + filteredUpdateInfo);
            }
        }
        window.plugins.malwarelytics.android.antivirus.setUpdateObserver(updateObserver);

        // observable features

        this.setButtonClick("is-rooted-button", async () => {
            alert("is rooted: " + await window.plugins.malwarelytics.android.rasp.isDeviceRooted());
        });
        
        this.setButtonClick("root-info-button", async () => {
            const result = await  window.plugins.malwarelytics.android.rasp.getRootDetection();
            alert("root info: " + JSON.stringify(result));
        });
        
        this.setButtonClick("is-emulator-button", async () => {
            alert("is emulator: " + await window.plugins.malwarelytics.android.rasp.isDeviceEmulator());
        });
        
        this.setButtonClick("emulator-info-button", async () => {
            alert("emulator info: " + JSON.stringify(await window.plugins.malwarelytics.android.rasp.getEmulatorDetection()));
        });
        
        this.setButtonClick("is-debugger-button", async () => {
            alert("is debugger: " + await window.plugins.malwarelytics.android.rasp.isDebuggerAttached());
        });
        
        this.setButtonClick("debugger-info-button", async () => {
            alert("debugger info: " + JSON.stringify(await window.plugins.malwarelytics.android.rasp.getDebuggerDetection()));
        });

        this.setButtonClick("repackage-info-button", async () => {
            alert("repackaged: " + await window.plugins.malwarelytics.android.rasp.getAppRepackaged());
        });

        this.setButtonClick("is-screen-shared-button", async () => {
            alert("is screenshared: " + await window.plugins.malwarelytics.android.rasp.isScreenShared());
        });
        
        this.setButtonClick("screen-shared-info-button", async () => {
            alert("screen sharing info: " + JSON.stringify(await window.plugins.malwarelytics.android.rasp.getScreenSharingDetection()));
        });
        
        this.setButtonClick("is-bad-tapjacking-capable-app-button", async () => {
            alert("is bad tapjacking-capable app present: " + await window.plugins.malwarelytics.android.rasp.isBadTapjackingCapableAppPresent());
        });
        
        this.setButtonClick("tapjacking-info-button", async () => {
            alert("tapjacking info: " + JSON.stringify(await window.plugins.malwarelytics.android.rasp.getTapjackingDetection()));
        });

        this.setButtonClick("is-http-proxy-button", async () => {
            alert("is HTTP proxy enabled: " + await window.plugins.malwarelytics.android.rasp.isHttpProxyEnabled());
        });

        this.setButtonClick("http-proxy-info-button", async () => {
            alert("HTTP proxy info: " + JSON.stringify(await window.plugins.malwarelytics.android.rasp.getHttpProxyDetection()));
        });

        this.setButtonClick("is-vpn-button", async () => {
            alert("is VPN enabled: " + await window.plugins.malwarelytics.android.rasp.isVpnEnabled());
        });
        
        this.setButtonClick("is-adb-button", async () => {
            alert("ADB status enabled: " + await window.plugins.malwarelytics.android.rasp.isAdbEnabled());
        });

        this.setButtonClick("is-active-call-button", async () => {
            alert("is active call: " + await window.plugins.malwarelytics.android.rasp.isCallActive());
        });

        this.setButtonClick("active-call-info-button", async () => {
            alert("active call info: " + JSON.stringify(await window.plugins.malwarelytics.android.rasp.getActiveCallDetection()));
        });

        this.setButtonClick("app-presence-info-button", async () => {
            alert("app presence info: " + JSON.stringify(await window.plugins.malwarelytics.android.rasp.getAppPresenceDetection()));
        });
        
        // passive features

        this.setButtonClick("is-screen-reader-button", async () => {
            alert("screen reader enabled: " + await window.plugins.malwarelytics.android.rasp.isNotAllowedScreenReaderEnabled());
        });

        this.setButtonClick("screen-reader-info-button", async () => {
            alert("screen reader info: " + JSON.stringify(await window.plugins.malwarelytics.android.rasp.getScreenReaderDetection()));
        });

        // info features

        this.setButtonClick("is-screen-lock-button", async () => {
            alert("is screenlock enabled: " + await window.plugins.malwarelytics.android.rasp.isDeviceUsingScreenLock());
        });
        
        this.setButtonClick("biometry-info-button", async () => {
            alert("biometry info: " + JSON.stringify(await window.plugins.malwarelytics.android.rasp.getBiometryDetection()));
        });

        this.setButtonClick("is-play-protect-button", async () => {
            alert("is play protect enabled: " + await window.plugins.malwarelytics.android.rasp.isPlayProtectEnabled());
        });

        this.setButtonClick("is-developer-options-button", async () => {
            alert("developer options enabled: " + await window.plugins.malwarelytics.android.rasp.isDeveloperOptionsEnabled());
        });


        var langSelect = document.getElementById("lang-select");
        langSelect.addEventListener("change", async (e: any) => {
            await window.plugins.malwarelytics.android.changeAppLanguage(e.target.value);
             alert(`Language echanged to ${e.target.value}`);
        });

        const isInitialized = await window.plugins.malwarelytics.isInitialized();
        console.log(`Is initialized: ${isInitialized}`);
        
        try {
            const list = await window.plugins.malwarelytics.android.antivirus.getThreatList();
            let itemPromises = list.items
                .filter(i => i.threatIndex == "MALWARE" || i.threatIndex == "HIGHLY_DANGEROUS" || i.threatIndex == "DANGEROUS")
                .map(async apk => {
                    let apkInfo = await window.plugins.malwarelytics.android.antivirus.getApkInfo(apk.packageName);
                    return [apk, apkInfo];
                });
            let enrichedItems = await Promise.all(itemPromises);
            enrichedItems
                .sort((a,b) => {
                    let s = function(x: ApkThreat): number {
                        switch (x.threatIndex) {
                            case "MALWARE":
                                return 1;
                            case "HIGHLY_DANGEROUS":
                                return 2;
                        }
                        return 3;
                    }
                    return s(a[0] as ApkThreat) - s(b[0] as ApkThreat);
                })
                .forEach( a => {
                    let apk = a[0] as ApkThreat;
                    let apkInfo = a[1] as ApkInfo;

                    let appList = document.getElementById("installed-apps");
                    var node = document.createElement('div');
                    var icon = "NO ICON";
                    if (apkInfo.icon) {
                        icon = `<img src="data:image/jpeg;base64,${apkInfo.icon}" />`;
                    } else {
                        icon = `<img src="../img/icon-placeholder.svg" />`
                    }
                    var threatCls = ""
                    switch (apk.threatIndex) {
                        case "MALWARE":
                            threatCls = "threat-malware";
                            break;
                        case "HIGHLY_DANGEROUS":
                            threatCls = "threat-hd";
                            break;
                        case "DANGEROUS":
                            threatCls = "threat-dangerous";
                            break;
                    }
                    node.innerHTML = `<div class="threat">${icon}<div class="appname">${apkInfo.label || apk.packageName}</div><div class="threatindex ${threatCls}">${apk.threatIndex}</div></div>`;
                    appList.appendChild(node);
                });
        } catch(e) {
            console.log(e);
        }

        let observer: MalwarelyticsAndroidRASPObserver = {
            debuggerDetected(detected: boolean) { console.log("RASP DEBUGGER DETECTED " + detected); },
            emulatorDetected(emulatorDetection: EmulatorDetection) { console.log("RASP EMULATOR DETECTED " + JSON.stringify(emulatorDetection)); },
            repackagingDetected(repackagingResult: RepackagingResult) {console.log("RASP REPACKAGING DETECTED " + JSON.stringify(repackagingResult)); },
            rootDetected(rootDetection: RootDetection) { console.log("RASP ROOT DETECTED " + JSON.stringify(rootDetection)); },
            screenSharingDetected(screenSharingDetected: ScreenSharingDetection) { console.log("RASP SCREEN SHARING DETECTED " + JSON.stringify(screenSharingDetected)); },
            screenReaderDetected(screenReaderDetected: ScreenReaderDetection) { console.log("RASP SCREEN READER DETECTED " + JSON.stringify(screenReaderDetected)); },
            tapjackingDetected(tapjackingDetection: TapjackingDetection) { console.log("RASP TAPJACKING DETECTED " + JSON.stringify(tapjackingDetection)); },
            httpProxyDetected(httpProxyDetection: HttpProxyDetection) { console.log("RASP HTTP PROXY DETECTED " + JSON.stringify(httpProxyDetection)); },
            vpnDetected(vpnEnabled: boolean) { console.log("RASP VPN DETECTED " + vpnEnabled); },
            adbStatusDetected(adbStatus: boolean) { console.log("RASP ADB STATUS DETECTED " + adbStatus); },
            activeCallDetected(activeCallDetection: ActiveCallDetection) { console.log("RASP ACTIVE CALL DETETECTED " + JSON.stringify(activeCallDetection)); },
            appPresenceDetected(appPresenceDetection: AppPresenceDetection) { console.log("RASP APP PRESENCE DETECTED " + JSON.stringify(appPresenceDetection)); }
        }

        window.plugins.malwarelytics.android.rasp.setObserver(observer);
    },

    async onRunSmartProtection() {
        document.getElementById("smart-protection-result").textContent = "Updating...";
        let result = await window.plugins.malwarelytics.android.antivirus.triggerSmartProtection();
        document.getElementById("smart-protection-result").textContent = "";
        demoApp.displaySmartProtectionResult(result);
    },

    displaySmartProtectionResult(result: SmartProtectionResult): void {
        alert("Smart Protection result:\nUI:" + result.uiDisplayed + "\nonline:" + result.onlineUpdateSucceeded + "\neval:" + result.evaluationSucceeded);
    },

    onChangeClientId() {
        navigator.notification.prompt("Client ID helps you to identify a user within your organization.", async (result) => {
            if (result.buttonIndex == 1) { // 1 based indexing, lol
                await window.plugins.malwarelytics.setClientId(result.input1 == "" ? null : result.input1 as string);
            }
        }, "Set Client ID", ["OK", "CLOSE"])
    },

    onChangeDeviceId() {
        navigator.notification.prompt("Device ID helps you to identify a user within your organization.", async (result) => {
            if (result.buttonIndex == 1) { // 1 based indexing, lol
                await window.plugins.malwarelytics.setDeviceId(result.input1 == "" ? null : result.input1 as string);
            }
        }, "Set Device ID", ["OK", "CLOSE"])
    },

    setButtonClick(id: string, handler: () => void) {
        document.getElementById(id).addEventListener("click", handler);
    },

    setAppState(state: AppState) {
        let parentElement = document.getElementById("deviceready");
        let preparingElement = parentElement.querySelector('.preparing');
        let readyElement = parentElement.querySelector('.ready');
        let failedElement = parentElement.querySelector('.failed');
        switch (state) {
            case AppState.READY:
                readyElement.setAttribute('style', 'display:block;');
                preparingElement.setAttribute('style', 'display:none;');
                failedElement.setAttribute('style', 'display:none;');
                break;
            case AppState.FAILED:
                failedElement.setAttribute('style', 'display:block;');
                preparingElement.setAttribute('style', 'display:none;');
                readyElement.setAttribute('style', 'display:none;');
                break;
            case AppState.PREPARING:
                preparingElement.setAttribute('style', 'display:block;');
                failedElement.setAttribute('style', 'display:none;');
                readyElement.setAttribute('style', 'display:none;');
                break;
        }
    },

    setAndroidState(androidInitResult: InitializationResult = null) {
        var androidElement = document.getElementById("androidready");
        var tempOfflineElement = document.getElementById("temp_offline");
        var permOfflineElement = document.getElementById("perm_offline");
        if (androidInitResult != null) {
            switch (androidInitResult) {
                case "SUCCESS":
                    androidElement.setAttribute('style', 'display:none');
                    tempOfflineElement.setAttribute('style', 'display:none');
                    permOfflineElement.setAttribute('style', 'display:none');
                    break;
                case "TEMPORARY_OFFLINE_MODE":
                    androidElement.setAttribute('style', 'display:block');
                    tempOfflineElement.setAttribute('style', 'display:block');
                    permOfflineElement.setAttribute('style', 'display:none');
                    break;
                case "PERMANENT_OFFLINE_MODE":
                    androidElement.setAttribute('style', 'display:block');
                    tempOfflineElement.setAttribute('style', 'display:none');
                    permOfflineElement.setAttribute('style', 'display:block');
                    break;
            }
        } else {
            androidElement.setAttribute('style', 'display:none');
            tempOfflineElement.setAttribute('style', 'display:none');
            permOfflineElement.setAttribute('style', 'display:none');
        }
    },

    setIosState(online: boolean) {
        var iosElement = document.getElementById("iosready");
        var onlineElement = document.getElementById("online-state");
        var offlineElement = document.getElementById("offline-state");
        if (online) {
            iosElement.setAttribute('style', 'display:block');
            onlineElement.setAttribute('style', 'display:block');
            offlineElement.setAttribute('style', 'display:none');
        } else {
            iosElement.setAttribute('style', 'display:block');
            onlineElement.setAttribute('style', 'display:none');
            offlineElement.setAttribute('style', 'display:block');
        }
    },

    displayPlatformUI(platform: Platform) {
        let androidControls = document.getElementById("android-controls");
        let iosControls = document.getElementById("ios-controls");
        let customerControls = document.getElementById("customer-identification");
        switch (platform) {
            case Platform.NONE:
                androidControls.setAttribute('style', 'display:none;');
                iosControls.setAttribute('style', 'display:none;');
                customerControls.setAttribute('style', 'display:none;');
                break;
            case Platform.ANDROID:
                customerControls.setAttribute('style', 'display:block;');
                androidControls.setAttribute('style', 'display:block;');
                iosControls.setAttribute('style', 'display:none;');
                break;
            case Platform.IOS:
                customerControls.setAttribute('style', 'display:block;');
                androidControls.setAttribute('style', 'display:none;');
                iosControls.setAttribute('style', 'display:block;');
                break;
        }
    },
};

demoApp.initialize();

// to make typescript happy

declare interface Window {
    plugins: {
        malwarelytics: MalwarelyticsPlugin;
    }
}

declare interface Navigator {
    notification: any;
}
