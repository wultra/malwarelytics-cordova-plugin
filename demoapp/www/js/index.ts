/// <reference path="../../plugins/cordova-plugin-malwarelytics/www/MalwarelyticsPlugin.d.ts"/>

var demoApp = {
    
    // Application Constructor
    initialize() {
        document.addEventListener('deviceready', this.onDeviceReady.bind(this), false);
    },

    setButtonClick(id: string, handler: () => void) {
        document.getElementById(id).addEventListener("click", handler);
    },

    async onDeviceReady() {

        var parentElement = document.getElementById("deviceready");
        var preparingElement = parentElement.querySelector('.preparing');
        var readyElement = parentElement.querySelector('.ready');
        var failedElement = parentElement.querySelector('.failed');
        
        var button = document.getElementById("smart-protection-button");
        var userIdButton = document.getElementById("set-user-id-button");
        button.setAttribute('style', 'display:inline-block');
        userIdButton.setAttribute('style', 'display:inline-block');
        button.addEventListener("click", this.onRunSmartProtection);
        userIdButton.addEventListener("click", this.onChangeClientId);

        this.setButtonClick("is-rooted-button", async () => {
            alert("is rooted: " + await window.plugins.malwarelytics.rasp.isDeviceRooted());
        });

        this.setButtonClick("root-info-button", async () => {
            const result = await  window.plugins.malwarelytics.rasp.getRootDetection();
            alert(JSON.stringify(result));
        });

        this.setButtonClick("is-emulator-button", async () => {
            alert("is emulator: " + await window.plugins.malwarelytics.rasp.isDeviceEmulator());
        });

        this.setButtonClick("emulator-info-button", async () => {
            alert(JSON.stringify(await window.plugins.malwarelytics.rasp.getEmulatorDetection()));
        });

        this.setButtonClick("is-debugger-button", async () => {
            alert("is debugger: " + await window.plugins.malwarelytics.rasp.isDebuggerAttached());
        });

        this.setButtonClick("debugger-info-button", async () => {
            alert(JSON.stringify(await window.plugins.malwarelytics.rasp.getDebuggerDetection()));
        });

        this.setButtonClick("http-proxy-info-button", async () => {
            alert(JSON.stringify(await window.plugins.malwarelytics.rasp.getHttpProxyDetection()));
        });

        this.setButtonClick("repackage-info-button", async () => {
            alert("repackaged: " + await window.plugins.malwarelytics.rasp.getAppRepackaged());
        });

        this.setButtonClick("is-screenshared-button", async () => {
            alert("is screenshared: " + await window.plugins.malwarelytics.rasp.isScreenShared());
        });

        this.setButtonClick("screenshared-info-button", async () => {
            alert(JSON.stringify(await window.plugins.malwarelytics.rasp.getScreenSharingDetection()));
        });

        this.setButtonClick("is-screenlock-button", async () => {
            alert("is screenlock enabled: " + await window.plugins.malwarelytics.rasp.isDeviceUsingScreenLock());
        });

        this.setButtonClick("is-playprotect-button", async () => {
            alert("is play protect enabled: " + await window.plugins.malwarelytics.rasp.isPlayProtectEnabled());
        });

        this.setButtonClick("screen-reader-enabled", async () => {
            alert("screen reader enabled: " + await window.plugins.malwarelytics.rasp.isNotAllowedScreenReaderEnabled());
        });

        var langSelect = document.getElementById("lang-select");
        langSelect.addEventListener("change", async (e: any) => {
            await window.plugins.malwarelytics.changeAppLanguage(e.target.value);
             alert(`Language echanged to ${e.target.value}`);
        });

        const isInitialized = await window.plugins.malwarelytics.isInitialized();
        console.log(`Is initialized: ${isInitialized}`);
        
        try {
            await window.plugins.malwarelytics.initialize({
                languageCode: "en",
                antivirus: {
                    enableSilentMode: false
                },
                rasp: {
                    exitOnRoot: true,
                    blockScreenshots: true
                }
            });
            preparingElement.setAttribute('style', 'display:none;');
            readyElement.setAttribute('style', 'display:block;');
            console.log("initialized");

            const list = await window.plugins.malwarelytics.antivirus.getThreatList();
            list.items.filter(i => i.threatIndex == "MALWARE" || i.threatIndex == "HIGHLY_DANGEROUS" || i.threatIndex == "DANGEROUS" || i.threatIndex == "POTENTIALLY_UNWANTED_APP").forEach( async apk => {
                let appList = document.getElementById("installed-apps");
                let apkInfo = await window.plugins.malwarelytics.antivirus.getApkInfo(apk.packageName);
                console.log(apkInfo.label);
                var node = document.createElement('div');
                var icon = "NO ICON";
                if (apkInfo.icon) {
                    icon = `<img src="data:image/jpeg;base64,${apkInfo.icon}" width="96" />`;
                }
                node.innerHTML = `<h3>${apkInfo.label || apk.packageName}</h3>${apk.threatIndex}<br>${icon}`;
                appList.appendChild(node);
            })
        } catch(e) {
            preparingElement.setAttribute('style', 'display:none;');
            failedElement.setAttribute('style', 'display:block;');
            console.log(e);
        }

        let observer: RaspObserver = {
            debuggerDetected(detected: boolean): void {
                console.log("RASP DEBUGGER DETECTED " + detected);
            },
            emulatorDetected(emulatorDetection: EmulatorDetection): void {
                console.log("RASP EMULATOR DETECTED " + JSON.stringify(emulatorDetection));
            },
            repackagingDetected(repackagingResult: RepackagingResult): void {
                console.log("RASP REPACKAGING DETECTED " + JSON.stringify(repackagingResult));
            },
            rootDetected(rootDetection: RootDetection): void {
                console.log("RASP ROOT DETECTED " + JSON.stringify(rootDetection));
            },
            screenSharingDetected(screenSharingDetected: boolean): void {
                console.log("RASP SCREEN SHARING DETECTED " + screenSharingDetected);
            },
            tapjackingDetected(tapjackingDetection: TapjackingDetection): void {
                console.log("RASP TAPJACKING DETECTED " + JSON.stringify(tapjackingDetection));
            },
            httpProxyDetected(httpProxyDetection: HttpProxyDetection): void {
                console.log("HTTP PROXY DETECTED " + JSON.stringify(httpProxyDetection));
            }
        }

        window.plugins.malwarelytics.rasp.setObserver(observer);
    },

    async onRunSmartProtection() {
        console.log("Smart Protection job is in progres...")
        await window.plugins.malwarelytics.antivirus.triggerSmartProtection();
        console.log("Smart Protection finished...")
    },

    onChangeClientId() {
        navigator.notification.prompt("Client ID helps you to identify a user within your organization.", async (result) => {
            if (result.buttonIndex == 1) { // 1 based indexing, lol
                await window.plugins.malwarelytics.setClientId(result.input1 == "" ? null : result.input1 as string);
            }
        }, "Set Client ID", ["OK", "CLOSE"])
    }
};

demoApp.initialize();

// to make typescript happy

declare interface Window {
    plugins: {
        malwarelytics: MalwarelyticsPlugin;
    }
}

declare interface Navigator {
    notification: any;
}