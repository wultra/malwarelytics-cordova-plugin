var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var demoApp = {
    initialize: function () {
        document.addEventListener('deviceready', this.onDeviceReady.bind(this), false);
    },
    setButtonClick: function (id, handler) {
        document.getElementById(id).addEventListener("click", handler);
    },
    onDeviceReady: function () {
        return __awaiter(this, void 0, void 0, function () {
            var parentElement, preparingElement, readyElement, failedElement, button, userIdButton, langSelect, isInitialized, list, e_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        parentElement = document.getElementById("deviceready");
                        preparingElement = parentElement.querySelector('.preparing');
                        readyElement = parentElement.querySelector('.ready');
                        failedElement = parentElement.querySelector('.failed');
                        button = document.getElementById("smart-protection-button");
                        userIdButton = document.getElementById("set-user-id-button");
                        button.setAttribute('style', 'display:inline-block');
                        userIdButton.setAttribute('style', 'display:inline-block');
                        button.addEventListener("click", this.onRunSmartProtection);
                        userIdButton.addEventListener("click", this.onChangeClientId);
                        this.setButtonClick("is-rooted-button", function () { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        _a = alert;
                                        _b = "is rooted: ";
                                        return [4, window.plugins.malwarelytics.rasp.isDeviceRooted()];
                                    case 1:
                                        _a.apply(void 0, [_b + (_c.sent())]);
                                        return [2];
                                }
                            });
                        }); });
                        this.setButtonClick("root-info-button", function () { return __awaiter(_this, void 0, void 0, function () {
                            var result;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4, window.plugins.malwarelytics.rasp.getRootDetection()];
                                    case 1:
                                        result = _a.sent();
                                        alert(JSON.stringify(result));
                                        return [2];
                                }
                            });
                        }); });
                        this.setButtonClick("is-emulator-button", function () { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        _a = alert;
                                        _b = "is emulator: ";
                                        return [4, window.plugins.malwarelytics.rasp.isDeviceEmulator()];
                                    case 1:
                                        _a.apply(void 0, [_b + (_c.sent())]);
                                        return [2];
                                }
                            });
                        }); });
                        this.setButtonClick("emulator-info-button", function () { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b, _c;
                            return __generator(this, function (_d) {
                                switch (_d.label) {
                                    case 0:
                                        _a = alert;
                                        _c = (_b = JSON).stringify;
                                        return [4, window.plugins.malwarelytics.rasp.getEmulatorDetection()];
                                    case 1:
                                        _a.apply(void 0, [_c.apply(_b, [_d.sent()])]);
                                        return [2];
                                }
                            });
                        }); });
                        this.setButtonClick("is-debugger-button", function () { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        _a = alert;
                                        _b = "is debugger: ";
                                        return [4, window.plugins.malwarelytics.rasp.isDebuggerAttached()];
                                    case 1:
                                        _a.apply(void 0, [_b + (_c.sent())]);
                                        return [2];
                                }
                            });
                        }); });
                        this.setButtonClick("debugger-info-button", function () { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b, _c;
                            return __generator(this, function (_d) {
                                switch (_d.label) {
                                    case 0:
                                        _a = alert;
                                        _c = (_b = JSON).stringify;
                                        return [4, window.plugins.malwarelytics.rasp.getDebuggerDetection()];
                                    case 1:
                                        _a.apply(void 0, [_c.apply(_b, [_d.sent()])]);
                                        return [2];
                                }
                            });
                        }); });
                        this.setButtonClick("repackage-info-button", function () { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        _a = alert;
                                        _b = "repackaged: ";
                                        return [4, window.plugins.malwarelytics.rasp.getAppRepackaged()];
                                    case 1:
                                        _a.apply(void 0, [_b + (_c.sent())]);
                                        return [2];
                                }
                            });
                        }); });
                        this.setButtonClick("is-screenshared-button", function () { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        _a = alert;
                                        _b = "is screenshared: ";
                                        return [4, window.plugins.malwarelytics.rasp.isScreenShared()];
                                    case 1:
                                        _a.apply(void 0, [_b + (_c.sent())]);
                                        return [2];
                                }
                            });
                        }); });
                        this.setButtonClick("screenshared-info-button", function () { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b, _c;
                            return __generator(this, function (_d) {
                                switch (_d.label) {
                                    case 0:
                                        _a = alert;
                                        _c = (_b = JSON).stringify;
                                        return [4, window.plugins.malwarelytics.rasp.getScreenSharingDetection()];
                                    case 1:
                                        _a.apply(void 0, [_c.apply(_b, [_d.sent()])]);
                                        return [2];
                                }
                            });
                        }); });
                        this.setButtonClick("is-screenlock-button", function () { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        _a = alert;
                                        _b = "is screenlock enabled: ";
                                        return [4, window.plugins.malwarelytics.rasp.isDeviceUsingScreenLock()];
                                    case 1:
                                        _a.apply(void 0, [_b + (_c.sent())]);
                                        return [2];
                                }
                            });
                        }); });
                        this.setButtonClick("is-playprotect-button", function () { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        _a = alert;
                                        _b = "is play protect enabled: ";
                                        return [4, window.plugins.malwarelytics.rasp.isPlayProtectEnabled()];
                                    case 1:
                                        _a.apply(void 0, [_b + (_c.sent())]);
                                        return [2];
                                }
                            });
                        }); });
                        this.setButtonClick("screen-reader-enabled", function () { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        _a = alert;
                                        _b = "screen reader enabled: ";
                                        return [4, window.plugins.malwarelytics.rasp.isNotAllowedScreenReaderEnabled()];
                                    case 1:
                                        _a.apply(void 0, [_b + (_c.sent())]);
                                        return [2];
                                }
                            });
                        }); });
                        langSelect = document.getElementById("lang-select");
                        langSelect.addEventListener("change", function (e) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4, window.plugins.malwarelytics.changeAppLanguage(e.target.value)];
                                    case 1:
                                        _a.sent();
                                        alert("Language echanged to " + e.target.value);
                                        return [2];
                                }
                            });
                        }); });
                        return [4, window.plugins.malwarelytics.isInitialized()];
                    case 1:
                        isInitialized = _a.sent();
                        console.log("Is initialized: " + isInitialized);
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 5, , 6]);
                        return [4, window.plugins.malwarelytics.initialize({
                                languageCode: "en",
                                antivirus: {
                                    enableSilentMode: false
                                },
                                rasp: {
                                    exitOnRoot: true
                                }
                            })];
                    case 3:
                        _a.sent();
                        preparingElement.setAttribute('style', 'display:none;');
                        readyElement.setAttribute('style', 'display:block;');
                        console.log("initialized");
                        return [4, window.plugins.malwarelytics.antivirus.getThreatList()];
                    case 4:
                        list = _a.sent();
                        list.items.filter(function (i) { return i.threatIndex == "MALWARE" || i.threatIndex == "HIGHLY_DANGEROUS" || i.threatIndex == "DANGEROUS" || i.threatIndex == "POTENTIALLY_UNWANTED_APP"; }).forEach(function (apk) { return __awaiter(_this, void 0, void 0, function () {
                            var appList, apkInfo, node, icon;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        appList = document.getElementById("installed-apps");
                                        return [4, window.plugins.malwarelytics.antivirus.getApkInfo(apk.packageName)];
                                    case 1:
                                        apkInfo = _a.sent();
                                        console.log(apkInfo.label);
                                        node = document.createElement('div');
                                        icon = "NO ICON";
                                        if (apkInfo.icon) {
                                            icon = "<img src=\"data:image/jpeg;base64," + apkInfo.icon + "\" width=\"96\" />";
                                        }
                                        node.innerHTML = "<h3>" + (apkInfo.label || apk.packageName) + "</h3>" + apk.threatIndex + "<br>" + icon;
                                        appList.appendChild(node);
                                        return [2];
                                }
                            });
                        }); });
                        return [3, 6];
                    case 5:
                        e_1 = _a.sent();
                        preparingElement.setAttribute('style', 'display:none;');
                        failedElement.setAttribute('style', 'display:block;');
                        console.log(e_1);
                        return [3, 6];
                    case 6:
                        window.plugins.malwarelytics.rasp.setObserver(this.observerCall);
                        return [2];
                }
            });
        });
    },
    observerCall: function (result) {
        console.log("RASP " + JSON.stringify(result));
    },
    onRunSmartProtection: function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.log("Smart Protection job is in progres...");
                        return [4, window.plugins.malwarelytics.antivirus.triggerSmartProtection()];
                    case 1:
                        _a.sent();
                        console.log("Smart Protection finished...");
                        return [2];
                }
            });
        });
    },
    onChangeClientId: function () {
        var _this = this;
        navigator.notification.prompt("Client ID helps you to identify a user within your organization.", function (result) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(result.buttonIndex == 1)) return [3, 2];
                        return [4, window.plugins.malwarelytics.setClientId(result.input1 == "" ? null : result.input1)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2];
                }
            });
        }); }, "Set Client ID", ["OK", "CLOSE"]);
    }
};
demoApp.initialize();
