/**
 * Malwarelytics configuration.
 */
export interface MalwarelyticsConfig {
    /**
     * Malwarelytics in silent mode does not show any UI. Default is true.
     */
    enableSilentMode?: boolean;
    /**
     * How often will be antivirus database checked (hourly). Default is 48 hours.
     */
    onlineCheckIntervalHours?: number;
    /**
     * Custom identifier of the user. You can set it later via setClientId method.
     */
    clientId?: string;
    /**
     * ISO 639-1 language code that the app will be used for UI localization.
     */
    languageCode?: string;
}
/**
 * Each type matches to specific error case
 */
export declare enum MalwarelyticsErrorType {
    PLUGIN_UNKNOWN_ACTION = "PLUGIN_UNKNOWN_ACTION",
    PLUGIN_ALREADY_INITIALIZED = "PLUGIN_ALREADY_INITIALIZED",
    PLUGIN_NOT_INITIALIZED = "PLUGIN_NOT_INITIALIZED",
    INITIALIZE_MISSING_CREDENTIALS_CONFIG = "INITIALIZE_MISSING_CREDENTIALS_CONFIG",
    INITIALIZE_MISSING_CREDENTIALS = "INITIALIZE_MISSING_CREDENTIALS",
    TRIGGER_SMART_PROTECTION_UPDATE_FAILED = "TRIGGER_SMART_PROTECTION_UPDATE_FAILED",
    TRIGGER_SMART_PROTECTION_FAILED = "TRIGGER_SMART_PROTECTION_FAILED"
}
export declare class MalwarelyticsError {
    readonly type: MalwarelyticsErrorType;
    readonly data?: any;
    readonly description: string;
    constructor(type: MalwarelyticsErrorType, description: string, data?: any);
}
/**
 * Javascript wrapper around native kotlin malwarelytics code.
 * Malwarelytics plugin can be accessed in cordova app via `window.plugins.malwarelytics` property.
 */
export declare class MalwarelyticsPlugin {
    
    /**
     * If the malwarelytics are initialized.
     * @param success Returns the result
     * @param error Called on error
     */
    isInitialized(success: successCallback<boolean>, error?: errorCallback): void;
    /**
     * Initializes themalwarelytics with provided configuration.
     * Note that username and password needs to be set inside the plugin kotlin file MalwarelyticsCredentials.kt
     *
     * @param config Configuration file
     * @param success When the configuration was success
     * @param error Called on error
     */
    initialize(config: MalwarelyticsConfig, success?: successCallback, error?: errorCallback): void;
    /**
     * Schedules a job that will execute smart protection run. Note that this is asynchronous and
     * can take some time.
     *
     * @param success When the job was scheduled
     * @param error Called on error
     */
    triggerSmartProtection(success?: successCallback, error?: errorCallback): void;
    /**
     * Sets new clinet id that will be sent to the backend for user identification.
     * Pass null to remove the current client id (for example when user logged-out).
     *
     * @param clientId Client id. Null for deleting the value
     * @param success When the id was set
     * @param error Called on error
     */
    setClientId(clientId: string, success?: successCallback, error?: errorCallback): void;
    /**
     * Utility helper method that changes to language of the Malwarelytics UI.
     * The language code follows the ISO 639-1 standard.
     *
     * Note that the language configuration is not persisted and you'll need to set it
     * every time the app is started.
     *
     * @param language ISO 639-1 language code
     * @param success When language change was success
     * @param error  When language change failed
     */
    changeAppLanguage(language: string, success?: successCallback, error?: errorCallback): void;
    private createFailCallback;
}
export declare type successCallback<T = void> = (result: T) => void;
export declare type errorCallback = (err: MalwarelyticsError) => void;
