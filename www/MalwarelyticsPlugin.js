var __MPRaspDetection;
(function (__MPRaspDetection) {
    // observable features
    __MPRaspDetection["IS_ROOTED"] = "IS_ROOTED";
    __MPRaspDetection["ROOT_DETECTION"] = "ROOT_DETECTION";
    __MPRaspDetection["IS_EMULATOR"] = "IS_EMULATOR";
    __MPRaspDetection["EMULATOR_INFO"] = "EMULATOR_INFO";
    __MPRaspDetection["IS_DEBUGGER"] = "IS_DEBUGGER";
    __MPRaspDetection["DEBUGGER_INFO"] = "DEBUGGER_INFO";
    __MPRaspDetection["REPACKAGE_INFO"] = "REPACKAGE_INFO";
    __MPRaspDetection["IS_SCREEN_SHARED"] = "IS_SCREEN_SHARED";
    __MPRaspDetection["SCREEN_SHARED_INFO"] = "SCREEN_SHARED_INFO";
    __MPRaspDetection["IS_BAD_TAPJACKING_CAPABLE_APP_PRESENT"] = "IS_BAD_TAPJACKING_CAPABLE_APP_PRESENT";
    __MPRaspDetection["TAPJACKING_INFO"] = "TAPJACKING_INFO";
    __MPRaspDetection["IS_HTTP_PROXY"] = "IS_HTTP_PROXY";
    __MPRaspDetection["HTTP_PROXY_INFO"] = "HTTP_PROXY_INFO";
    __MPRaspDetection["IS_VPN"] = "IS_VPN";
    __MPRaspDetection["ADB_STATUS"] = "ADB_STATUS";
    __MPRaspDetection["IS_ACTIVE_CALL"] = "IS_ACTIVE_CALL";
    __MPRaspDetection["ACTIVE_CALL_INFO"] = "ACTIVE_CALL_INFO";
    __MPRaspDetection["APP_PRESENCE_INFO"] = "APP_PRESENCE_INFO";
    // passive features
    __MPRaspDetection["NOT_ALLOWED_SCREEN_READER_ENABLED"] = "NOT_ALLOWED_SCREEN_READER_ENABLED";
    __MPRaspDetection["SCREEN_READER_INFO"] = "SCREEN_READER_INFO";
    // info features
    __MPRaspDetection["SCREEN_LOCK_ENABLED"] = "SCREEN_LOCK_ENABLED";
    __MPRaspDetection["BIOMETRY"] = "BIOMETRY";
    __MPRaspDetection["PLAY_PROTECT_ENABLED"] = "PLAY_PROTECT_ENABLED";
    __MPRaspDetection["DEVELOPER_OPTIONS"] = "DEVELOPER_OPTIONS";
})(__MPRaspDetection || (__MPRaspDetection = {}));
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __MPService = /** @class */ (function () {
    function __MPService() {
        this.pluginName = "MalwarelyticsPlugin";
    }
    __MPService.prototype.callAsync = function (name) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, new Promise(function (resolve, reject) {
                            cordova.exec(function (result) {
                                resolve(result);
                            }, function (data) {
                                reject(new MalwarelyticsError(data, ""));
                            }, _this.pluginName, name, args);
                        })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    __MPService.prototype.call = function (name, success, error) {
        var args = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            args[_i - 3] = arguments[_i];
        }
        cordova.exec(success, function (data) {
            if (error) {
                error(new MalwarelyticsError(data, ""));
            }
        }, this.pluginName, name, args);
    };
    return __MPService;
}());
/**
 * Bridge for Malwarelytics for Android
 */
var __MPAndroidService = /** @class */ (function (_super) {
    __extends(__MPAndroidService, _super);
    function __MPAndroidService() {
        var _this = _super.call(this) || this;
        _this.platform = "Android";
        _this.isAndroid = window.cordova.platformId.toLowerCase() === "android";
        return _this;
    }
    __MPAndroidService.prototype.callAsync = function (name) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!this.isAndroid) {
                    console.log("Invalid call to '".concat(name, "' on platform: ").concat(window.cordova.platformId));
                    return [2 /*return*/, Promise.reject()];
                }
                return [2 /*return*/, _super.prototype.callAsync.apply(this, __spreadArray([name], args, false))];
            });
        });
    };
    __MPAndroidService.prototype.call = function (name, success, error) {
        var args = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            args[_i - 3] = arguments[_i];
        }
        if (!this.isAndroid) {
            console.log("Invalid call to '".concat(name, "' on platform: ").concat(window.cordova.platformId));
            return;
        }
        _super.prototype.call.apply(this, __spreadArray([name, success, error], args, false));
    };
    return __MPAndroidService;
}(__MPService));
/**
 * Bridge for Malwarelytics for Apple
 */
var __MPAppleService = /** @class */ (function (_super) {
    __extends(__MPAppleService, _super);
    function __MPAppleService() {
        var _this = _super.call(this) || this;
        _this.platform = "iOS";
        _this.isIos = window.cordova.platformId.toLowerCase() === "ios";
        return _this;
    }
    __MPAppleService.prototype.callAsync = function (name) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!this.isIos) {
                    console.log("Invalid call to '".concat(name, "' on platform: ").concat(window.cordova.platformId));
                    return [2 /*return*/, Promise.reject()];
                }
                return [2 /*return*/, _super.prototype.callAsync.apply(this, __spreadArray([name], args, false))];
            });
        });
    };
    __MPAppleService.prototype.call = function (name, success, error) {
        var args = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            args[_i - 3] = arguments[_i];
        }
        if (!this.isIos) {
            console.log("Invalid call to '".concat(name, "' on platform: ").concat(window.cordova.platformId));
            return;
        }
        _super.prototype.call.apply(this, __spreadArray([name, success, error], args, false));
    };
    return __MPAppleService;
}(__MPService));
/**
 * Malwarelytics features for the Android platform.
 */
var MalwarelyticsAndroid = /** @class */ (function (_super) {
    __extends(MalwarelyticsAndroid, _super);
    function MalwarelyticsAndroid() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /** Features for antivirus component. */
        _this.antivirus = new MalwarelyticsAndroidAntivirus();
        /** Features for RASP component. */
        _this.rasp = new MalwarelyticsAndroidRASP();
        return _this;
    }
    /**
     * Utility helper method that changes to language of the Malwarelytics UI.
     * The language code follows the ISO 639-1 standard.
     *
     * Note that the language configuration is not persisted and you'll need to set it
     * every time the app is started.
     *
     * @param language ISO 639-1 language code
     */
    MalwarelyticsAndroid.prototype.changeAppLanguage = function (language) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.callAsync("changeAppLanguage", language)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get result of the initialization.
     */
    MalwarelyticsAndroid.prototype.getInitializationResult = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.callAsync("getInitializationResult")];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return MalwarelyticsAndroid;
}(__MPAndroidService));
/**
* Antivirus component of the Malwarelytics for Android.
*/
var MalwarelyticsAndroidAntivirus = /** @class */ (function (_super) {
    __extends(MalwarelyticsAndroidAntivirus, _super);
    function MalwarelyticsAndroidAntivirus() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
    * Schedules a job that will execute smart protection run. Note that this is asynchronous and
    * can take some time.
    *
    * @param performOnlineUpdate Optional argument to indicate that online update is not desired.
    * If false only local data will be used.
    */
    MalwarelyticsAndroidAntivirus.prototype.triggerSmartProtection = function (performOnlineUpdate) {
        if (performOnlineUpdate === void 0) { performOnlineUpdate = true; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.callAsync("triggerSmartProtection", performOnlineUpdate)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
    * Returns list of all applications with the malware evaluation.
    */
    MalwarelyticsAndroidAntivirus.prototype.getThreatList = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.callAsync("getThreatList")];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
    * Gets more information for the package name of the application.
    *
    * @param packageName Package name of the application
    */
    MalwarelyticsAndroidAntivirus.prototype.getApkInfo = function (packageName) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.callAsync("getApkInfo", packageName)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get information about the last updates.
     *
     * Primarily intended for troubleshooting.
     *
     * @returns Information about latest update successes and failures.
     */
    MalwarelyticsAndroidAntivirus.prototype.getLastUpdateInfo = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.callAsync("getLastUpdateInfo")];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return MalwarelyticsAndroidAntivirus;
}(__MPAndroidService));
/**
 * RASP component of the Malwarelytics for Android.
 */
var MalwarelyticsAndroidRASP = /** @class */ (function (_super) {
    __extends(MalwarelyticsAndroidRASP, _super);
    function MalwarelyticsAndroidRASP() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /** Adds observer that will be called when security event occures (for example when debugger connects). */
    MalwarelyticsAndroidRASP.prototype.setObserver = function (observer) {
        return this.call("setRaspCallback", function (result) {
            switch (result.type) {
                case RaspCallbackType.DEBUGGER: {
                    observer.debuggerDetected(result.payload);
                    break;
                }
                case RaspCallbackType.EMULATOR: {
                    observer.emulatorDetected(result.payload);
                    break;
                }
                case RaspCallbackType.REPACKAGING: {
                    observer.repackagingDetected(result.payload);
                    break;
                }
                case RaspCallbackType.ROOT: {
                    observer.rootDetected(result.payload);
                    break;
                }
                case RaspCallbackType.SCREEN_SHARING: {
                    observer.screenSharingDetected(result.payload);
                    break;
                }
                case RaspCallbackType.SCREEN_READER: {
                    observer.screenReaderDetected(result.payload);
                    break;
                }
                case RaspCallbackType.TAPJACKING: {
                    observer.tapjackingDetected(result.payload);
                    break;
                }
                case RaspCallbackType.HTTP_PROXY: {
                    observer.httpProxyDetected(result.payload);
                    break;
                }
                case RaspCallbackType.VPN: {
                    observer.vpnDetected(result.payload);
                    break;
                }
                case RaspCallbackType.ADB_STATUS: {
                    observer.adbStatusDetected(result.payload);
                    break;
                }
                case RaspCallbackType.ACTIVE_CALL: {
                    observer.activeCallDetected(result.payload);
                    break;
                }
                case RaspCallbackType.APP_PRESENCE: {
                    observer.appPresenceDetected(result.payload);
                    break;
                }
            }
        }, null);
    };
    MalwarelyticsAndroidRASP.prototype.clearObserver = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.callAsync("clearRaspCallback")];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** If the device is rooted */
    MalwarelyticsAndroidRASP.prototype.isDeviceRooted = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getBoolState(__MPRaspDetection.IS_ROOTED)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** Detailed information about the state of the root on this device. */
    MalwarelyticsAndroidRASP.prototype.getRootDetection = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getInfo(__MPRaspDetection.ROOT_DETECTION)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** If app is running on emulator. */
    MalwarelyticsAndroidRASP.prototype.isDeviceEmulator = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getBoolState(__MPRaspDetection.IS_EMULATOR)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** Detailed information about the state of the emulator detection. */
    MalwarelyticsAndroidRASP.prototype.getEmulatorDetection = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getInfo(__MPRaspDetection.EMULATOR_INFO)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** If debugger is attached to this app. */
    MalwarelyticsAndroidRASP.prototype.isDebuggerAttached = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getBoolState(__MPRaspDetection.IS_DEBUGGER)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** Detailed information about the debugger. */
    MalwarelyticsAndroidRASP.prototype.getDebuggerDetection = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getInfo(__MPRaspDetection.DEBUGGER_INFO)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** Detailed info about the repackaging. */
    MalwarelyticsAndroidRASP.prototype.getAppRepackaged = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getInfo(__MPRaspDetection.REPACKAGE_INFO)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** If the screen is shared. */
    MalwarelyticsAndroidRASP.prototype.isScreenShared = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getBoolState(__MPRaspDetection.IS_SCREEN_SHARED)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** Detailed info about screen sharing. */
    MalwarelyticsAndroidRASP.prototype.getScreenSharingDetection = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getInfo(__MPRaspDetection.SCREEN_SHARED_INFO)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** If app that cn do tapjacking is present. */
    MalwarelyticsAndroidRASP.prototype.isBadTapjackingCapableAppPresent = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getBoolState(__MPRaspDetection.IS_BAD_TAPJACKING_CAPABLE_APP_PRESENT)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** Detailed info about tapjacking. */
    MalwarelyticsAndroidRASP.prototype.getTapjackingDetection = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getInfo(__MPRaspDetection.TAPJACKING_INFO)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** If http proxy is enabled. */
    MalwarelyticsAndroidRASP.prototype.isHttpProxyEnabled = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getBoolState(__MPRaspDetection.IS_HTTP_PROXY)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** Detailed info about http proxy. */
    MalwarelyticsAndroidRASP.prototype.getHttpProxyDetection = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getInfo(__MPRaspDetection.HTTP_PROXY_INFO)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** If VPN is enabled. */
    MalwarelyticsAndroidRASP.prototype.isVpnEnabled = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getBoolState(__MPRaspDetection.IS_VPN)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** If ADB is enabled. */
    MalwarelyticsAndroidRASP.prototype.isAdbEnabled = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getBoolState(__MPRaspDetection.ADB_STATUS)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** If there's ongoing active call at the moment. */
    MalwarelyticsAndroidRASP.prototype.isCallActive = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getBoolState(__MPRaspDetection.IS_ACTIVE_CALL)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** Detailed info about active call. */
    MalwarelyticsAndroidRASP.prototype.getActiveCallDetection = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getInfo(__MPRaspDetection.ACTIVE_CALL_INFO)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** Detailed info about application presence. */
    MalwarelyticsAndroidRASP.prototype.getAppPresenceDetection = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getInfo(__MPRaspDetection.APP_PRESENCE_INFO)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** If disalowed scren reader is enabled. */
    MalwarelyticsAndroidRASP.prototype.isNotAllowedScreenReaderEnabled = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getBoolState(__MPRaspDetection.NOT_ALLOWED_SCREEN_READER_ENABLED)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** Detailed info about screen readers. */
    MalwarelyticsAndroidRASP.prototype.getScreenReaderDetection = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getInfo(__MPRaspDetection.SCREEN_READER_INFO)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** If screen lock is set. */
    MalwarelyticsAndroidRASP.prototype.isDeviceUsingScreenLock = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getBoolState(__MPRaspDetection.SCREEN_LOCK_ENABLED)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** Obtain biometry detection. */
    MalwarelyticsAndroidRASP.prototype.getBiometryDetection = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getInfo(__MPRaspDetection.BIOMETRY)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** If google play protect is enabled. */
    MalwarelyticsAndroidRASP.prototype.isPlayProtectEnabled = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getBoolState(__MPRaspDetection.PLAY_PROTECT_ENABLED)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** If developer options are enabled. */
    MalwarelyticsAndroidRASP.prototype.isDeveloperOptionsEnabled = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getBoolState(__MPRaspDetection.DEVELOPER_OPTIONS)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    MalwarelyticsAndroidRASP.prototype.getInfo = function (detection) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.callAsync("raspInfo", detection)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    MalwarelyticsAndroidRASP.prototype.getBoolState = function (detection) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.callAsync("raspInfo", detection)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result == 1];
                }
            });
        });
    };
    return MalwarelyticsAndroidRASP;
}(__MPAndroidService));
/**
 * Malwarelytics features for the Apple platforms.
 */
var MalwarelyticsApple = /** @class */ (function (_super) {
    __extends(MalwarelyticsApple, _super);
    function MalwarelyticsApple() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /** Features for RASP component. */
        _this.rasp = new MalwarelyticsAppleRASP();
        return _this;
    }
    /**
     * If the malwarelytics are initialized in the online mode.
     */
    MalwarelyticsApple.prototype.isOnline = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.callAsync("isOnline")];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Obtain list of DetectableApp.KnownApp items that are predefined in native iOS library.
     */
    MalwarelyticsApple.prototype.getKnownDetectableApps = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.callAsync("getKnownDetectableApps")];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return MalwarelyticsApple;
}(__MPAppleService));
/**
 * Malwarelytics RASP features for the Apple platforms.
 */
var MalwarelyticsAppleRASP = /** @class */ (function (_super) {
    __extends(MalwarelyticsAppleRASP, _super);
    function MalwarelyticsAppleRASP() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /** Adds observer that will be called when security event occures (for example when debugger connects). */
    MalwarelyticsAppleRASP.prototype.setObserver = function (observer) {
        return this.call("setRaspCallback", function (result) {
            switch (result.type) {
                case AppleRaspCallbackType.DEBUGGER: {
                    observer.debuggerDetected();
                    break;
                }
                case AppleRaspCallbackType.JAILBREAK: {
                    observer.jailbreakDetected();
                    break;
                }
                case AppleRaspCallbackType.REPACKAGED: {
                    observer.repackageDetected();
                    break;
                }
                case AppleRaspCallbackType.HTTP_PROXY: {
                    observer.httpProxyEnabled();
                    break;
                }
                case AppleRaspCallbackType.SCREENSHOT_DETECTED: {
                    observer.userScreenshotDetected();
                    break;
                }
                case AppleRaspCallbackType.SCREEN_CAPTURE_CHANGED: {
                    observer.screenCapturedChanged(result.payload);
                    break;
                }
                case AppleRaspCallbackType.REVERSE_TOOLS: {
                    observer.reverseEngineeringToolsDetected();
                    break;
                }
                case AppleRaspCallbackType.DEVICE_PASSCODE_CHANGED: {
                    observer.systemPasscodeConfigurationChanged(result.payload);
                    break;
                }
                case AppleRaspCallbackType.DEVICE_BIOMETRY_CHANGED: {
                    observer.systemBiometryConfigurationChanged(result.payload);
                    break;
                }
                case AppleRaspCallbackType.VPN_CHANGED: {
                    observer.vpnChanged(result.payload);
                    break;
                }
                case AppleRaspCallbackType.ON_CALL_CHANGED: {
                    observer.onCallChanged(result.payload);
                    break;
                }
                case AppleRaspCallbackType.INSTALLED_APPS_CHANGED: {
                    observer.installedAppsChanged(result.payload);
                    break;
                }
            }
        }, null);
    };
    MalwarelyticsAppleRASP.prototype.clearObserver = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.callAsync("clearRaspCallback")];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** If the device is Jailbroken. */
    MalwarelyticsAppleRASP.prototype.isDeviceJailbroken = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.callAsync("isJailbroken")];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** If the app is being debugged. */
    MalwarelyticsAppleRASP.prototype.isDebuggerConnected = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.callAsync("isDebuggerConnected")];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** If the app is signed with different signature. */
    MalwarelyticsAppleRASP.prototype.isRepackaged = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.callAsync("isRepackaged")];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** True when reverse engineering tools are present. */
    MalwarelyticsAppleRASP.prototype.isReverseEngineeringToolsPresent = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.callAsync("isReverseEngineeringToolsPresent")];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** If HTTP proxy is enabled in iOS Settings. */
    MalwarelyticsAppleRASP.prototype.isHttpProxyEnabled = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.callAsync("isHttpProxyEnabled")];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** If the app is running on emulator. */
    MalwarelyticsAppleRASP.prototype.isEmulator = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.callAsync("isEmulator")];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** If device screen is being captured. */
    MalwarelyticsAppleRASP.prototype.isScreenCaptured = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.callAsync("isScreenCaptured")];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** If the user is using (has enrolled) biometry. */
    MalwarelyticsAppleRASP.prototype.isSystemBiometryEnabled = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.callAsync("isSystemBiometryEnabled")];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** If the user has passcode enabled in the system (device lock). */
    MalwarelyticsAppleRASP.prototype.isSystemPasscodeEnabled = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.callAsync("isSystemPasscodeEnabled")];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** If VPN is active on the device. */
    MalwarelyticsAppleRASP.prototype.isVpnActive = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.callAsync("isVpnActive")];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** If there is active (phone) call. */
    MalwarelyticsAppleRASP.prototype.isOnCall = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.callAsync("isOnCall")];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Obtain the list of installed apps.
     * Available apps to check needs to be configured in the `AppProtectionRaspConfig.appPresence` configuration.
     *
     * @returns list of installed apps.
     */
    MalwarelyticsAppleRASP.prototype.installedApps = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.callAsync("installedApps")];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return MalwarelyticsAppleRASP;
}(__MPAppleService));
var AppleRaspCallbackType;
(function (AppleRaspCallbackType) {
    AppleRaspCallbackType["DEBUGGER"] = "DEBUGGER";
    AppleRaspCallbackType["JAILBREAK"] = "JAILBREAK";
    AppleRaspCallbackType["REPACKAGED"] = "REPACKAGED";
    AppleRaspCallbackType["HTTP_PROXY"] = "HTTP_PROXY";
    AppleRaspCallbackType["SCREENSHOT_DETECTED"] = "SCREENSHOT_DETECTED";
    AppleRaspCallbackType["SCREEN_CAPTURE_CHANGED"] = "SCREEN_CAPTURE_CHANGED";
    AppleRaspCallbackType["REVERSE_TOOLS"] = "REVERSE_TOOLS";
    AppleRaspCallbackType["DEVICE_PASSCODE_CHANGED"] = "DEVICE_PASSCODE_CHANGED";
    AppleRaspCallbackType["DEVICE_BIOMETRY_CHANGED"] = "DEVICE_BIOMETRY_CHANGED";
    AppleRaspCallbackType["VPN_CHANGED"] = "VPN_CHANGED";
    AppleRaspCallbackType["ON_CALL_CHANGED"] = "ON_CALL_CHANGED";
    AppleRaspCallbackType["INSTALLED_APPS_CHANGED"] = "INSTALLED_APPS_CHANGED";
})(AppleRaspCallbackType || (AppleRaspCallbackType = {}));
var MalwarelyticsError = /** @class */ (function () {
    function MalwarelyticsError(type, description, data) {
        if (data === void 0) { data = null; }
        this.type = type;
        this.data = data;
        this.description = description;
    }
    return MalwarelyticsError;
}());
/**
 * JavaScript wrapper around native kotlin/swift Malwarelytics code.
 * Malwarelytics plugin can be accessed in cordova app via `window.plugins.malwarelytics` property.
 */
var MalwarelyticsPlugin = /** @class */ (function (_super) {
    __extends(MalwarelyticsPlugin, _super);
    function MalwarelyticsPlugin() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /** Features for the Android platform. */
        _this.android = new MalwarelyticsAndroid();
        /** Features for the Apple platforms. */
        _this.apple = new MalwarelyticsApple();
        return _this;
    }
    /**
     * If the malwarelytics are initialized.
     */
    MalwarelyticsPlugin.prototype.isInitialized = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.callAsync("isInitialized")];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Initializes Malwarelytics with provided configuration.
     * Note that username and password needs to be set inside the plugin kotlin file MalwarelyticsCredentials.kt
     *
     * @param config Configuration file
     */
    MalwarelyticsPlugin.prototype.initialize = function (config) {
        return __awaiter(this, void 0, void 0, function () {
            var stringified;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        stringified = JSON.stringify(config);
                        return [4 /*yield*/, this.callAsync("initialize", stringified)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Sets new client id that will be sent to the backend for user identification.
     * Pass null to remove the current client id (for example when user logged-out).
     *
     * @param clientId Client id. Null for deleting the value
     */
    MalwarelyticsPlugin.prototype.setClientId = function (clientId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.callAsync("setClientId", clientId)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Sets new device id that will be sent to the backend for user identification.
     * Pass null to remove the current device id.
     *
     * @param deviceId Device id. Null for deleting the value
     */
    MalwarelyticsPlugin.prototype.setDeviceId = function (deviceId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.callAsync("setDeviceId", deviceId)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return MalwarelyticsPlugin;
}(__MPService));
module.exports = new MalwarelyticsPlugin();
/**
 * Result of initialization on Android.
 */
var InitializationResult;
(function (InitializationResult) {
    InitializationResult["SUCCESS"] = "SUCCESS";
    InitializationResult["TEMPORARY_OFFLINE_MODE"] = "TEMPORARY_OFFLINE_MODE";
    InitializationResult["PERMANENT_OFFLINE_MODE"] = "PERMANENT_OFFLINE_MODE";
})(InitializationResult || (InitializationResult = {}));
/** Result of an update. */
var UpdateResult;
(function (UpdateResult) {
    /**
     * Successful update.
     *
     * All apps were successfully updated without any error.
     */
    UpdateResult["SUCCESS"] = "SUCCESS";
    /**
     * Partially successful update.
     *
     * Some apps were successfully updated but not all of them.
     * Some apps couldn't be successfully updated for some reason.
     */
    UpdateResult["PARTIAL_SUCCESS"] = "PARTIAL_SUCCESS";
    /**
     * Failure.
     *
     * Update failed for some reason.
     */
    UpdateResult["FAILURE"] = "FAILURE";
})(UpdateResult || (UpdateResult = {}));
/** Type of update. */
var UpdateType;
(function (UpdateType) {
    /** Updating only a selection of apps. Happens for example when new app is installed or an app is updated. */
    UpdateType["PARTIAL"] = "PARTIAL";
    /** Updating all apps. */
    UpdateType["FULL"] = "FULL";
})(UpdateType || (UpdateType = {}));
var CallState;
(function (CallState) {
    CallState["IDLE"] = "IDLE";
    CallState["RINGING"] = "RINGING";
    CallState["ACTIVE_CALL"] = "ACTIVE_CALL";
    CallState["ACTIVE_COMMUNNICATION"] = "ACTIVE_COMMUNNICATION";
    CallState["CALL_SCREENING"] = "CALL_SCREENING";
    CallState["ACTIVE_CALL_REDIRECT"] = "ACTIVE_CALL_REDIRECT";
    CallState["ACTIVE_COMMUNICATION_REDIRECT"] = "ACTIVE_COMMUNICATION_REDIRECT";
    CallState["UNKNOWN"] = "UNKNOWN";
})(CallState || (CallState = {}));
var BiometricStatus;
(function (BiometricStatus) {
    BiometricStatus["CONFIGURED"] = "CONFIGURED";
    BiometricStatus["UNKNOWN"] = "UNKNOWN";
    BiometricStatus["UNSUPPORTED"] = "UNSUPPORTED";
    BiometricStatus["CURRENTLY_UNAVAILABLE"] = "CURRENTLY_UNAVAILABLE";
    BiometricStatus["NONE_ENROLLED"] = "NONE_ENROLLED";
})(BiometricStatus || (BiometricStatus = {}));
var DebuggerType;
(function (DebuggerType) {
    DebuggerType["JAVA"] = "JAVA";
    DebuggerType["NATIVE"] = "NATIVE";
})(DebuggerType || (DebuggerType = {}));
var EmulatorType;
(function (EmulatorType) {
    EmulatorType["AVD"] = "AVD";
    EmulatorType["GENYMOTION"] = "GENYMOTION";
    EmulatorType["OTHER"] = "OTHER";
})(EmulatorType || (EmulatorType = {}));
var EmulatorDetectionProof;
(function (EmulatorDetectionProof) {
    EmulatorDetectionProof["EDP_01"] = "EDP_01";
    EmulatorDetectionProof["EDP_02"] = "EDP_02";
    EmulatorDetectionProof["EDP_03"] = "EDP_03";
    EmulatorDetectionProof["EDP_04"] = "EDP_04";
    EmulatorDetectionProof["EDP_05"] = "EDP_05";
    EmulatorDetectionProof["EDP_06"] = "EDP_06";
    EmulatorDetectionProof["EDP_07"] = "EDP_07";
    EmulatorDetectionProof["EDP_08"] = "EDP_08";
    EmulatorDetectionProof["EDP_09"] = "EDP_09";
    EmulatorDetectionProof["EDP_10"] = "EDP_10";
})(EmulatorDetectionProof || (EmulatorDetectionProof = {}));
var RaspCallbackType;
(function (RaspCallbackType) {
    RaspCallbackType["DEBUGGER"] = "DEBUGGER";
    RaspCallbackType["EMULATOR"] = "EMULATOR";
    RaspCallbackType["REPACKAGING"] = "REPACKAGING";
    RaspCallbackType["ROOT"] = "ROOT";
    RaspCallbackType["SCREEN_SHARING"] = "SCREEN_SHARING";
    RaspCallbackType["SCREEN_READER"] = "SCREEN_READER";
    RaspCallbackType["TAPJACKING"] = "TAPJACKING";
    RaspCallbackType["HTTP_PROXY"] = "HTTP_PROXY";
    RaspCallbackType["VPN"] = "VPN";
    RaspCallbackType["ADB_STATUS"] = "ADB_STATUS";
    RaspCallbackType["ACTIVE_CALL"] = "ACTIVE_CALL";
    RaspCallbackType["APP_PRESENCE"] = "APP_PRESENCE";
})(RaspCallbackType || (RaspCallbackType = {}));
var RepackagingResult;
(function (RepackagingResult) {
    RepackagingResult["REPACKAGED_APP"] = "REPACKAGED_APP";
    RepackagingResult["ORIGINAL_APP"] = "ORIGINAL_APP";
    RepackagingResult["INVALID_CONFIG"] = "INVALID_CONFIG";
})(RepackagingResult || (RepackagingResult = {}));
var RootDetectionProof;
(function (RootDetectionProof) {
    RootDetectionProof["RDP_01"] = "RDP_01";
    RootDetectionProof["RDP_02"] = "RDP_02";
    RootDetectionProof["RDP_03"] = "RDP_03";
    RootDetectionProof["RDP_04"] = "RDP_04";
    RootDetectionProof["RDP_05"] = "RDP_05";
    RootDetectionProof["RDP_06"] = "RDP_06";
    RootDetectionProof["RDP_07"] = "RDP_07";
    RootDetectionProof["RDP_08"] = "RDP_08";
    RootDetectionProof["RDP_09"] = "RDP_09";
    RootDetectionProof["RDP_10"] = "RDP_10";
    RootDetectionProof["RDP_11"] = "RDP_11";
    RootDetectionProof["RDP_12"] = "RDP_12";
})(RootDetectionProof || (RootDetectionProof = {}));
