var MalwarelyticsError = /** @class */ (function () {
    function MalwarelyticsError(type, description, data) {
        if (data === void 0) { data = null; }
        this.type = type;
        this.data = data;
        this.description = description;
    }
    return MalwarelyticsError;
}());
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/**
 * Javascript wrapper around native kotlin malwarelytics code.
 * Malwarelytics plugin can be accessed in cordova app via `window.plugins.malwarelytics` property.
 */
var MalwarelyticsPlugin = /** @class */ (function () {
    function MalwarelyticsPlugin() {
        this.pluginName = "MalwarelyticsPlugin";
    }
    /**
     * If the malwarelytics are initialized.
     * @param success Returns the result
     * @param error Called on error
     */
    MalwarelyticsPlugin.prototype.isInitialized = function (success, error) {
        if (error === void 0) { error = null; }
        cordova.exec(function (data) { success(data === 1); }, this.createFailCallback(error), this.pluginName, "isInitialized");
    };
    /**
     * Initializes themalwarelytics with provided configuration.
     * Note that username and password needs to be set inside the plugin kotlin file MalwarelyticsCredentials.kt
     *
     * @param config Configuration file
     * @param success When the configuration was success
     * @param error Called on error
     */
    MalwarelyticsPlugin.prototype.initialize = function (config, success, error) {
        if (success === void 0) { success = null; }
        if (error === void 0) { error = null; }
        var cfg = __assign({ enableSilentMode: true, onlineCheckIntervalHours: 48, updateOnInitialize: true }, config);
        cordova.exec(success, this.createFailCallback(error), this.pluginName, "initialize", [cfg.enableSilentMode, cfg.onlineCheckIntervalHours, cfg.updateOnInitialize, cfg.clientId, cfg.languageCode]);
    };
    /**
     * Schedules a job that will execute smart protection run. Note that this is asynchronous and
     * can take some time.
     *
     * @param success When the job was scheduled
     * @param error Called on error
     */
    MalwarelyticsPlugin.prototype.triggerSmartProtection = function (success, error) {
        if (success === void 0) { success = null; }
        if (error === void 0) { error = null; }
        cordova.exec(success, this.createFailCallback(error), this.pluginName, "triggerSmartProtection");
    };
    /**
     * Sets new clinet id that will be sent to the backend for user identification.
     * Pass null to remove the current client id (for example when user logged-out).
     *
     * @param clientId Client id. Null for deleting the value
     * @param success When the id was set
     * @param error Called on error
     */
    MalwarelyticsPlugin.prototype.setClientId = function (clientId, success, error) {
        if (success === void 0) { success = null; }
        if (error === void 0) { error = null; }
        cordova.exec(success, this.createFailCallback(error), this.pluginName, "setClientId", [clientId]);
    };
    /**
     * Returns list of all applications with the malware evaluation.
     *
     * @param success APKs
     * @param error Called on error
     */
    MalwarelyticsPlugin.prototype.getThreatList = function (success, error) {
        if (success === void 0) { success = null; }
        if (error === void 0) { error = null; }
        cordova.exec(success, this.createFailCallback(error), this.pluginName, "getThreatList");
    };
    /**
     * Gets more information for the package name of the application.
     *
     * @param packageName Package name of the application
     * @param success Information about the application with the label and icon.
     * @param error Called on error
     */
    MalwarelyticsPlugin.prototype.getApkInfo = function (packageName, success, error) {
        if (success === void 0) { success = null; }
        if (error === void 0) { error = null; }
        cordova.exec(success, this.createFailCallback(error), this.pluginName, "getApkInfo", [packageName]);
    };
    // - UTIL METHODS --
    /**
     * Utility helper method that changes to language of the Malwarelytics UI.
     * The language code follows the ISO 639-1 standard.
     *
     * Note that the language configuration is not persisted and you'll need to set it
     * every time the app is started.
     *
     * @param language ISO 639-1 language code
     * @param success When language change was success
     * @param error  When language change failed
     */
    MalwarelyticsPlugin.prototype.changeAppLanguage = function (language, success, error) {
        if (success === void 0) { success = null; }
        if (error === void 0) { error = null; }
        cordova.exec(success, this.createFailCallback(error), this.pluginName, "changeAppLanguage", [language]);
    };
    // -- INTERNALS --
    //
    MalwarelyticsPlugin.prototype.createFailCallback = function (error) {
        return function (data) {
            if (error) {
                error(new MalwarelyticsError(data, ""));
            }
        };
    };
    return MalwarelyticsPlugin;
}());
module.exports = new MalwarelyticsPlugin();
