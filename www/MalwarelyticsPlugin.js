var __MPRaspRetection;
(function (__MPRaspRetection) {
    __MPRaspRetection["ROOT_DETECTION"] = "ROOT_DETECTION";
    __MPRaspRetection["IS_ROOTED"] = "IS_ROOTED";
    __MPRaspRetection["IS_EMULATOR"] = "IS_EMULATOR";
    __MPRaspRetection["EMULATOR_INFO"] = "EMULATOR_INFO";
    __MPRaspRetection["IS_DEBUGGER"] = "IS_DEBUGGER";
    __MPRaspRetection["DEBUGGER_INFO"] = "DEBUGGER_INFO";
    __MPRaspRetection["REPACKAGE_INFO"] = "REPACKAGE_INFO";
    __MPRaspRetection["IS_SCREEN_SHARED"] = "IS_SCREEN_SHARED";
    __MPRaspRetection["SCREEN_SHARED_INFO"] = "SCREEN_SHARED_INFO";
    __MPRaspRetection["SCREEN_LOCK_ENABLED"] = "SCREEN_LOCK_ENABLED";
    __MPRaspRetection["PLAY_PROTECT_ENABLED"] = "PLAY_PROTECT_ENABLED";
})(__MPRaspRetection || (__MPRaspRetection = {}));
var __MPWrapper = /** @class */ (function () {
    function __MPWrapper() {
        this.pluginName = "MalwarelyticsPlugin";
    }
    __MPWrapper.prototype.call = function (name, success, error) {
        var args = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            args[_i - 3] = arguments[_i];
        }
        cordova.exec(success, this.createFailCallback(error), this.pluginName, name, args);
    };
    __MPWrapper.prototype.createFailCallback = function (error) {
        return function (data) {
            if (error) {
                error(new MalwarelyticsError(data, ""));
            }
        };
    };
    return __MPWrapper;
}());
var MalwarelyticsError = /** @class */ (function () {
    function MalwarelyticsError(type, description, data) {
        if (data === void 0) { data = null; }
        this.type = type;
        this.data = data;
        this.description = description;
    }
    return MalwarelyticsError;
}());
/**
 * Javascript wrapper around native kotlin malwarelytics code.
 * Malwarelytics plugin can be accessed in cordova app via `window.plugins.malwarelytics` property.
 */
var MalwarelyticsPlugin = /** @class */ (function () {
    function MalwarelyticsPlugin() {
        this.w = new __MPWrapper();
        /** Features for antivirus component */
        this.antivirus = new Antivirus(this.w);
        /** Features for RASP component. */
        this.rasp = new Rasp(this.w);
    }
    /**
     * If the malwarelytics are initialized.
     * @param success Returns the result
     * @param error Called on error
     */
    MalwarelyticsPlugin.prototype.isInitialized = function (success, error) {
        if (error === void 0) { error = null; }
        this.w.call("isInitialized", wrapBoolResp(success), error);
    };
    /**
     * Initializes themalwarelytics with provided configuration.
     * Note that username and password needs to be set inside the plugin kotlin file MalwarelyticsCredentials.kt
     *
     * @param config Configuration file
     * @param success When the configuration was success
     * @param error Called on error
     */
    MalwarelyticsPlugin.prototype.initialize = function (config, success, error) {
        if (success === void 0) { success = null; }
        if (error === void 0) { error = null; }
        var stringified = JSON.stringify(config);
        this.w.call("initialize", success, error, stringified);
    };
    /**
     * Sets new clinet id that will be sent to the backend for user identification.
     * Pass null to remove the current client id (for example when user logged-out).
     *
     * @param clientId Client id. Null for deleting the value
     * @param success When the id was set
     * @param error Called on error
     */
    MalwarelyticsPlugin.prototype.setClientId = function (clientId, success, error) {
        if (success === void 0) { success = null; }
        if (error === void 0) { error = null; }
        this.w.call("setClientId", success, error, clientId);
    };
    // - UTIL METHODS --
    /**
     * Utility helper method that changes to language of the Malwarelytics UI.
     * The language code follows the ISO 639-1 standard.
     *
     * Note that the language configuration is not persisted and you'll need to set it
     * every time the app is started.
     *
     * @param language ISO 639-1 language code
     * @param success When language change was success
     * @param error  When language change failed
     */
    MalwarelyticsPlugin.prototype.changeAppLanguage = function (language, success, error) {
        if (success === void 0) { success = null; }
        if (error === void 0) { error = null; }
        this.w.call("changeAppLanguage", success, error, language);
    };
    return MalwarelyticsPlugin;
}());
var Antivirus = /** @class */ (function () {
    function Antivirus(w) {
        this.w = w;
    }
    /**
     * Schedules a job that will execute smart protection run. Note that this is asynchronous and
     * can take some time.
     *
     * @param success When the job was scheduled
     * @param error Called on error
     */
    Antivirus.prototype.triggerSmartProtection = function (success, error) {
        if (success === void 0) { success = null; }
        if (error === void 0) { error = null; }
        this.w.call("triggerSmartProtection", success, error);
    };
    /**
     * Returns list of all applications with the malware evaluation.
     *
     * @param success APKs
     * @param error Called on error
     */
    Antivirus.prototype.getThreatList = function (success, error) {
        if (success === void 0) { success = null; }
        if (error === void 0) { error = null; }
        this.w.call("getThreatList", success, error);
    };
    /**
     * Gets more information for the package name of the application.
     *
     * @param packageName Package name of the application
     * @param success Information about the application with the label and icon.
     * @param error Called on error
     */
    Antivirus.prototype.getApkInfo = function (packageName, success, error) {
        if (success === void 0) { success = null; }
        if (error === void 0) { error = null; }
        this.w.call("getApkInfo", success, error, packageName);
    };
    return Antivirus;
}());
var Rasp = /** @class */ (function () {
    function Rasp(w) {
        this.w = w;
    }
    Rasp.prototype.getRootDetection = function (success, error) {
        if (error === void 0) { error = null; }
        this.getInfo(__MPRaspRetection.ROOT_DETECTION, success, error);
    };
    Rasp.prototype.isDeviceRooted = function (success, error) {
        if (error === void 0) { error = null; }
        this.getInfo(__MPRaspRetection.IS_ROOTED, wrapBoolResp(success), error);
    };
    Rasp.prototype.getEmulatorDetection = function (success, error) {
        if (error === void 0) { error = null; }
        this.getInfo(__MPRaspRetection.EMULATOR_INFO, success, error);
    };
    Rasp.prototype.isDeviceEmulator = function (success, error) {
        if (error === void 0) { error = null; }
        this.getInfo(__MPRaspRetection.IS_EMULATOR, wrapBoolResp(success), error);
    };
    Rasp.prototype.getDebuggerDetection = function (success, error) {
        if (error === void 0) { error = null; }
        this.getInfo(__MPRaspRetection.DEBUGGER_INFO, success, error);
    };
    Rasp.prototype.isDebuggerAttached = function (success, error) {
        if (error === void 0) { error = null; }
        this.getInfo(__MPRaspRetection.IS_DEBUGGER, wrapBoolResp(success), error);
    };
    Rasp.prototype.getAppRepackaged = function (success, error) {
        if (error === void 0) { error = null; }
        this.getInfo(__MPRaspRetection.REPACKAGE_INFO, success, error);
    };
    Rasp.prototype.getScreenSharingDetection = function (success, error) {
        if (error === void 0) { error = null; }
        this.getInfo(__MPRaspRetection.SCREEN_SHARED_INFO, success, error);
    };
    Rasp.prototype.isScreenShared = function (success, error) {
        if (error === void 0) { error = null; }
        this.getInfo(__MPRaspRetection.IS_SCREEN_SHARED, wrapBoolResp(success), error);
    };
    Rasp.prototype.isDeviceUsingScreenLock = function (success, error) {
        if (error === void 0) { error = null; }
        this.getInfo(__MPRaspRetection.SCREEN_LOCK_ENABLED, wrapBoolResp(success), error);
    };
    Rasp.prototype.isPlayProtectEnabled = function (success, error) {
        if (error === void 0) { error = null; }
        this.getInfo(__MPRaspRetection.PLAY_PROTECT_ENABLED, wrapBoolResp(success), error);
    };
    Rasp.prototype.getInfo = function (detection, success, error) {
        if (error === void 0) { error = null; }
        this.w.call("raspInfo", success, error, detection);
    };
    return Rasp;
}());
function wrapBoolResp(success) {
    return function (data) { success(data === 1); };
}
module.exports = new MalwarelyticsPlugin();
var DebuggerType;
(function (DebuggerType) {
    DebuggerType["JAVA"] = "JAVA";
    DebuggerType["NATIVE"] = "NATIVE";
})(DebuggerType || (DebuggerType = {}));
var EmulatorType;
(function (EmulatorType) {
    EmulatorType["AVD"] = "AVD";
    EmulatorType["GENYMOTION"] = "GENYMOTION";
    EmulatorType["OTHER"] = "OTHER";
})(EmulatorType || (EmulatorType = {}));
var RepackagingResult;
(function (RepackagingResult) {
    RepackagingResult["REPACKAGED_APP"] = "REPACKAGED_APP";
    RepackagingResult["ORIGINAL_APP"] = "ORIGINAL_APP";
    RepackagingResult["INVALID_CONFIG"] = "INVALID_CONFIG";
})(RepackagingResult || (RepackagingResult = {}));
var RootDetectionProof;
(function (RootDetectionProof) {
    RootDetectionProof["RDP_01"] = "RDP_01";
    RootDetectionProof["RDP_02"] = "RDP_02";
    RootDetectionProof["RDP_03"] = "RDP_03";
    RootDetectionProof["RDP_04"] = "RDP_04";
    RootDetectionProof["RDP_05"] = "RDP_05";
    RootDetectionProof["RDP_06"] = "RDP_06";
    RootDetectionProof["RDP_07"] = "RDP_07";
    RootDetectionProof["RDP_08"] = "RDP_08";
    RootDetectionProof["RDP_09"] = "RDP_09";
    RootDetectionProof["RDP_10"] = "RDP_10";
    RootDetectionProof["RDP_11"] = "RDP_11";
    RootDetectionProof["RDP_12"] = "RDP_12";
})(RootDetectionProof || (RootDetectionProof = {}));
