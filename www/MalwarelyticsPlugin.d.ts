/**
 * Malwarelytics configuration.
 */
interface MalwarelyticsConfig {
    /**
     * Malwarelytics in silent mode does not show any UI. Default is true.
     */
    enableSilentMode?: boolean;
    /**
     * How often will be antivirus database checked (hourly). Default is 48 hours.
     */
    onlineCheckIntervalHours?: number;
    /**
     * Custom identifier of the user. You can set it later via setClientId method.
     */
    clientId?: string;
    /**
     * ISO 639-1 language code that the app will be used for UI localization.
     */
    languageCode?: string;
}
/**
 * Each type matches to specific error case
 */
declare enum MalwarelyticsErrorType {
    PLUGIN_UNKNOWN_ACTION = "PLUGIN_UNKNOWN_ACTION",
    PLUGIN_ALREADY_INITIALIZED = "PLUGIN_ALREADY_INITIALIZED",
    PLUGIN_NOT_INITIALIZED = "PLUGIN_NOT_INITIALIZED",
    INITIALIZE_MISSING_CREDENTIALS = "INITIALIZE_MISSING_CREDENTIALS",
    TRIGGER_SMART_PROTECTION_UPDATE_FAILED = "TRIGGER_SMART_PROTECTION_UPDATE_FAILED",
    TRIGGER_SMART_PROTECTION_FAILED = "TRIGGER_SMART_PROTECTION_FAILED",
    UTILS_LANG_CHANGE_FAILED = "UTILS_LANG_CHANGE_FAILED",
    THREAT_LIST_FAILED = "THREAT_LIST_FAILED"
}
declare class MalwarelyticsError {
    readonly type: MalwarelyticsErrorType;
    readonly data?: any;
    readonly description: string;
    constructor(type: MalwarelyticsErrorType, description: string, data?: any);
}
/**
 * Javascript wrapper around native kotlin malwarelytics code.
 * Malwarelytics plugin can be accessed in cordova app via `window.plugins.malwarelytics` property.
 */
declare class MalwarelyticsPlugin {
    readonly pluginName = "MalwarelyticsPlugin";
    /**
     * If the malwarelytics are initialized.
     * @param success Returns the result
     * @param error Called on error
     */
    isInitialized(success: successCallback<boolean>, error?: errorCallback): void;
    /**
     * Initializes themalwarelytics with provided configuration.
     * Note that username and password needs to be set inside the plugin kotlin file MalwarelyticsCredentials.kt
     *
     * @param config Configuration file
     * @param success When the configuration was success
     * @param error Called on error
     */
    initialize(config: MalwarelyticsConfig, success?: successCallback, error?: errorCallback): void;
    /**
     * Schedules a job that will execute smart protection run. Note that this is asynchronous and
     * can take some time.
     *
     * @param success When the job was scheduled
     * @param error Called on error
     */
    triggerSmartProtection(success?: successCallback, error?: errorCallback): void;
    /**
     * Sets new clinet id that will be sent to the backend for user identification.
     * Pass null to remove the current client id (for example when user logged-out).
     *
     * @param clientId Client id. Null for deleting the value
     * @param success When the id was set
     * @param error Called on error
     */
    setClientId(clientId: string, success?: successCallback, error?: errorCallback): void;
    getThreatList(success?: successCallback<ApkThreat[]>, error?: errorCallback): void;
    /**
     * Utility helper method that changes to language of the Malwarelytics UI.
     * The language code follows the ISO 639-1 standard.
     *
     * Note that the language configuration is not persisted and you'll need to set it
     * every time the app is started.
     *
     * @param language ISO 639-1 language code
     * @param success When language change was success
     * @param error  When language change failed
     */
    changeAppLanguage(language: string, success?: successCallback, error?: errorCallback): void;
    private createFailCallback;
}
declare type successCallback<T = void> = (result: T) => void;
declare type errorCallback = (err: MalwarelyticsError) => void;
declare var module: any;
/**
 * An apk with analyzed threats.
 */
interface ApkThreat {
    /** Package name (application Id) of the app posing a threat to the current app. */
    packageName: string;
    /** Threat index indicating severity of the threat. */
    threatIndex: ThreatIndex;
    /** Optional name of malware detection. This is not bound to the thratIndex, can appear independently. */
    malwareDetectionName?: string;
    /** Set of recommended mitigations for handling the threat. */
    mitigations: ThreatMitigation[];
    /** Evaluated threat reasons marking what is dangerous about the app. */
    reasons: ThreatReason[];
    /** Store the app was installed from (for example google play). */
    threatInstaller: ThreatInstaller;
}
/**
 * A threat level that is posed by an app.
 */
declare enum ThreatIndex {
    /** The found threats clearly indicate that the app is a malware. */
    MALWARE = "MALWARE",
    /**
     * The found threats indicate that the app is highly dangerous
     * to the current app.
     * It uses multiple potential attack vectors
     * including techniques directly targeting the current app.
     */
    HIGHLY_DANGEROUS = "HIGHLY_DANGEROUS",
    /**
     * The found threats indicate that the app is dangerous
     * to the current app.
     * Is uses multiple potential attack vectors.
     * However, no technique directly targeting the current app was detected.
     */
    DANGEROUS = "DANGEROUS",
    /**
     * The found threats indicate that the app might be potentially dangerous.
     * For example it declares potentially dangerous permissions.
     *
     * However it it quite possible that the app is legitimate.
     */
    POTENTIALLY_UNWANTED_APP = "POTENTIALLY_UNWANTED_APP",
    /** There are no found threats. */
    SAFE = "SAFE",
    /**
     * The threat is unknown.
     *
     * The app was probably not found.
     * In case of suggestions, there's none.
     */
    UNKNOWN = "UNKNOWN"
}
/**
 * Installer app of an apk.
 */
declare enum ThreatInstaller {
    /** The app was installed via Google Play */
    STORE_GOOGLE_PLAY = "STORE_GOOGLE_PLAY",
    /** The app was installed via Huawei App Gallery */
    STORE_HUAWEI_APP_GALLERY = "STORE_HUAWEI_APP_GALLERY",
    /** The app was installed via Samsung Galaxy Store */
    STORE_SAMSUNG_GALAXY_STORE = "STORE_SAMSUNG_GALAXY_STORE",
    /** The app was installed via Aptoide */
    STORE_APTOIDE = "STORE_APTOIDE"
}
declare enum ThreatMitigation {
    WARNING_SCREEN = "WARNING_SCREEN",
    NOTIFICATION = "NOTIFICATION",
    SHOW_WEB = "SHOW_WEB",
    KILL_APP = "KILL_APP",
    KILL_APP_SHOW_WEB = "KILL_APP_SHOW_WEB"
}
/**
 * Evaluated flag for an apk threat.
 *
 * The flag risk the other app is posing.
 */
declare enum ThreatReason {
    /** Accesibility */
    ACCESSIBILITY = "ACCESSIBILITY",
    /** Read sms, receive sms, notification listener */
    SMS_ACCESS = "SMS_ACCESS",
    /** Task hijacking, screen overlay */
    SCREEN_OVERRIDE = "SCREEN_OVERRIDE",
    /** Can install apps */
    INSTALLER = "INSTALLER",
    /** Can uninstall apps */
    UNINSTALLER = "UNINSTALLER",
    /** Hides it's internals/function */
    EVADER = "EVADER",
    /** Not installed via Google Play */
    OUTSIDE_GOOGLE_PLAY = "OUTSIDE_GOOGLE_PLAY",
    /** Can play with your calls, e.g. it can setup a call forwarding of your calls */
    CALLER = "CALLER",
    /** The app is preloaded on the device */
    PRELOADED_APP = "PRELOADED_APP",
    /** The app is privileged (system privileges) */
    PRIVILEGED_APP = "PRIVILEGED_APP",
    /** Tshe app is debuggable */
    DEVELOPMENT_OR_TEST = "DEVELOPMENT_OR_TEST"
}
