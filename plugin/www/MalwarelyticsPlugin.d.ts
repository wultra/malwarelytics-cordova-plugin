/**
 * Malwarelytics configuration.
 */
interface MalwarelyticsConfig {
    enableSilentMode?: boolean;
    onlineCheckIntervalHours?: number;
    clientId?: string;
}
/**
 * Each type matches to specific error case
 */
declare enum MalwarelyticsErrorType {
    PLUGIN_UNKNOWN_ACTION = "PLUGIN_UNKNOWN_ACTION",
    PLUGIN_ALREADY_INITIALIZED = "PLUGIN_ALREADY_INITIALIZED",
    PLUGIN_NOT_INITIALIZED = "PLUGIN_NOT_INITIALIZED",
    INITIALIZE_MISSING_CREDENTIALS = "INITIALIZE_MISSING_CREDENTIALS"
}
declare class MalwarelyticsError {
    readonly type: MalwarelyticsErrorType;
    readonly data?: any;
    readonly description: string;
    constructor(type: MalwarelyticsErrorType, description: string, data?: any);
}
/**
 * Javascript wrapper around native kotlin malwarelytics code.
 * Malwarelytics plugin can be accessed in cordova app via `window.plugins.malwarelytics` property.
 */
declare class MalwarelyticsPlugin {
    readonly pluginName = "MalwarelyticsPlugin";
    /**
     * If the malwarelytics are initialized.
     * @param success Returns the result
     * @param error Called on error
     */
    isInitialized(success: successCallback<boolean>, error?: errorCallback): void;
    /**
     * Initializes themalwarelytics with provided configuration.
     * Note that username and password needs to be set inside the plugin kotlin file MalwarelyticsCredentials.kt
     *
     * @param config Configuration file
     * @param success When the configuration was success
     * @param error Called on error
     */
    initialize(config: MalwarelyticsConfig, success?: successCallback, error?: errorCallback): void;
    /**
     * Schedules a job that will execute smart protection run. Note that this is asynchronous and
     * can take some time.
     *
     * @param success When the job was scheduled
     * @param error Called on error
     */
    triggerSmartProtection(success?: successCallback, error?: errorCallback): void;
    /**
     * Sets new clinet id that will be sent to the backend for user identification.
     * Pass null to remove the current client id (for example when user logged-out).
     *
     * @param clientId Client id. Null for deleting the value
     * @param success When the id was set
     * @param error Called on error
     */
    setClientId(clientId: string, success?: successCallback, error?: errorCallback): void;
    private createFailCallback;
}
declare type successCallback<T = void> = (result: T) => void;
declare type errorCallback = (err: MalwarelyticsError) => void;
declare var module: any;
