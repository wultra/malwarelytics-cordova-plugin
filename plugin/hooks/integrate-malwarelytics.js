const fs = require("fs");
const xml2js = require("xml2js");

const configClassName = "MalwarelyticsConfig";
const configPackage = "com.wultra.android.cordova.malwarelytics.plugin";
const configPath = "./platforms/android/app/src/main/java/" + configPackage.split(".").join("/");
const configFile = `${configPath}/${configClassName}.kt`

const appConfigFile = "./config.xml";

let  deferral;


function generateCredentials() {
    const configXML = fs.readFileSync(appConfigFile).toString();
    const parser = new xml2js.Parser();
    parser.parseString(configXML, (error, config) => {
        if (error) {
            console.log(error);
            return;
        }
        if (!config.widget.hasOwnProperty('platform')) {
            console.error("Malwarelytics: platform tag is not configured")
            return;
        }

        let username = "";
        let password = "";
        let theme = null;
        let notificationIcon = null;
        let aarPath = null;

        for (let x of config.widget.platform) {
            if (x['$'].name === 'android') {
                if (x.hasOwnProperty('malwarelytics') && x['malwarelytics'][0]['$']) {
                    username = x['malwarelytics'][0]['$'].username || "";
                    password = x['malwarelytics'][0]['$'].password || "";
                    theme = x['malwarelytics'][0]['$'].theme || null;
                    notificationIcon = x['malwarelytics'][0]['$'].notificationIcon || null;
                    aarPath = x['malwarelytics'][0]['$'].libraryPath || null
                } else {
                    console.error("Malwarelytics: missing malwarelytics credentials in config.xml");
                }
                break;
            }
        }

        if (aarPath != null) {
            const libFolder = "./platforms/android/app/libs/";
            fs.mkdirSync(libFolder, { recursive: true });
            fs.copyFile(aarPath, libFolder + "antivirus.aar", function(error) {
                if (error) {
                    console.error(`Malwarelytics: failed to copy library file: ${error}`);
                }
            });
        } else {
            console.error("Malwarelytics: missing path to the library. Set 'libraryPath' for your <malwarelytics /> inside the config.xml.")
        }

        if (password == null || username == null) {
            console.log("Malwarelytics: 'username' or 'password' is not set in <malwarelytics /> inside the config.xml");
        }

        const content = `package ${configPackage}

class ${configClassName} {

    companion object {
        const val USER_NAME = "${username}"
        const val PASSWORD = "${password}"
        val THEME: Int? = ${theme}
        val NOTIFICATION_ICON: Int? = ${notificationIcon}
    }
}`;

        fs.writeFile(configFile, content, function(error) {
            if (error) {
                console.error(`Malwarelytics: failed to generate config file: ${error}`)
            } else {
                console.log("Malwarelytics: credentials file generated")
            }
        })

    });
}


module.exports = function(ctx) {
    try{
        deferral = require('q').defer();
        generateCredentials();
        deferral.resolve();
    }catch(e){
        let msg = e.toString();
        console.dir(e);
        deferral.reject(msg);
        return deferral.promise;
    }
};