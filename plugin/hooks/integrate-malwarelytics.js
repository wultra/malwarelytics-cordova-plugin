const fs = require("fs");
const xml2js = require("xml2js");

const configClassName = "MalwarelyticsConfig";
const configPackage = "com.wultra.android.cordova.malwarelytics.plugin";
const configPath = "./platforms/android/app/src/main/java/" + configPackage.split(".").join("/");
const configFile = `${configPath}/${configClassName}.kt`

const malwarelyticsConfigFile = "./malwarelytics.xml";

let  deferral;

function generateCredentials() {

    if (!fs.existsSync(malwarelyticsConfigFile)) {
        throw `Malwarelytics: Missing configuration file in ${malwarelyticsConfigFile}`;
    }

    const xmlFile = fs.readFileSync(malwarelyticsConfigFile).toString();
    const parser = new xml2js.Parser();
    parser.parseString(xmlFile, (error, config) => {
        
        if (error) {
            throw `Malwarelytics: ${error}`;
        }

        let username = config.malwarelytics["username"] || null;
        let password = config.malwarelytics["password"] || null;
        let theme = config.malwarelytics["theme"] || null;
        let notificationIcon = config.malwarelytics["notification-icon"] || null;
        let aarPath = config.malwarelytics["library-path"] || null;

        if (aarPath != null) {
            const libFolder = "./platforms/android/app/libs/";
            fs.mkdirSync(libFolder, { recursive: true });
            fs.copyFile(aarPath[0], libFolder + "antivirus.aar", function(error) {
                if (error) {
                    throw `Malwarelytics: failed to copy library file: ${error}`;
                }
            });
        } else {
            throw `Malwarelytics: missing path to native library inside the config file`;
        }

        if (password == null || username == null) {
            throw `Malwarelytics: 'username' or 'password' is not set in config file ${malwarelyticsConfigFile}`;
        }

        const content = `package ${configPackage}

class ${configClassName} {

    companion object {
        const val USER_NAME = "${username}"
        const val PASSWORD = "${password}"
        val THEME: Int? = ${theme}
        val NOTIFICATION_ICON: Int? = ${notificationIcon}
    }
}`;

        fs.writeFile(configFile, content, function(error) {
            if (error) {
                throw `Malwarelytics: failed to generate config file: ${error}`;
            } else {
                console.log("Malwarelytics: credentials file generated")
            }
        })

    });
}


module.exports = function(ctx) {
    try{
        deferral = require('q').defer();
        generateCredentials();
        deferral.resolve();
    }catch(e){
        let msg = e.toString();
        console.dir(e);
        deferral.reject(msg);
        return deferral.promise;
    }
};