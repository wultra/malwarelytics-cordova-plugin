//
// Copyright 2020 Wultra s.r.o.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions
// and limitations under the License.
//

package com.wultra.android.cordova.malwarelytics.plugin

import com.wultra.android.antimalware.*
import com.wultra.android.antimalware.update.*
import com.wultra.android.antimalware.internal.smartprotection.*
import org.apache.cordova.*
import org.json.JSONArray
import org.json.JSONException
import org.json.JSONObject
import android.content.Context
import android.content.Intent
import android.content.ComponentName
import android.app.job.*
import android.os.Build

class MalwarelyticsPlugin : CordovaPlugin() {

    enum class Error {
        PLUGIN_UNKNOWN_ACTION,
        PLUGIN_ALREADY_INITIALIZED,
        PLUGIN_NOT_INITIALIZED,
        
        INITIALIZE_MISSING_CREDENTIALS_CONFIG,
        INITIALIZE_MISSING_CREDENTIALS
    }

    private var antivirus: Antivirus? = null

    @Throws(JSONException::class)
    override fun execute(action: String, args: JSONArray, callbackContext: CallbackContext): Boolean {
        
        if (action == "initialize") {
            val configClass = args.getString(0)
            val enableSilentMode = args.getBoolean(1)
            val onlineCheckIntervalHours = args.getInt(2)
            val clientId: String? = if(args.isNull(3)) {
                                        null
                                    } else {
                                        args.getString(3)
                                    }
            this.initialize(configClass, enableSilentMode, onlineCheckIntervalHours, clientId, callbackContext)
            return true
        }

        if (action == "isInitialized") {
            this.isInitialized(callbackContext)
            return true
        }

        if (action == "triggerSmartProtection") {
            this.triggerSmartProtection(callbackContext)
            return true
        }

        if (action == "setClientId") {
            val clientId: String? = if(args.isNull(0)) {
                                        null
                                    } else {
                                        args.getString(0)
                                    }
            this.setClientId(clientId, callbackContext)
            return true
        }

        callbackContext.error(Error.PLUGIN_UNKNOWN_ACTION.name)

        return false
    }

    fun isInitialized(callbackContext: CallbackContext? = null): Boolean {
        val result = this.antivirus?.isInitialized() ?: false
        callbackContext?.success(if (result) 1 else 0)
        return result
    }

    fun initialize(configClass: String, enableSilentMode: Boolean, onlineCheckIntervalHours: Int, clientId: String?, callbackContext: CallbackContext) {

        if (this.isInitialized()) {
            callbackContext.error(Error.PLUGIN_ALREADY_INITIALIZED.name)
            return
        }

        val username: String
        val password: String
        var theme: Int? = null
        var notificationIcon: Int? = null

        try {
            val o = Class.forName(configClass).newInstance()
            username = o.javaClass.getMethod("getUserName").invoke(o) as String
            password = o.javaClass.getMethod("getPassword").invoke(o) as String
            try {
                theme = o.javaClass.getMethod("getTheme").invoke(o) as Int
            } catch (e: Exception) {
                // dont care
            }
            try {
                notificationIcon = o.javaClass.getMethod("getNotificationIcon").invoke(o) as Int
            } catch (e: Exception) {
                // dont care
            }
        } catch (e: Exception) {
            callbackContext.error(Error.INITIALIZE_MISSING_CREDENTIALS_CONFIG.name)
            return
        }

        if (password == "" || username == "") {
            callbackContext.error(Error.INITIALIZE_MISSING_CREDENTIALS.name)
            return
        }

        val context = cordova.getActivity().getApplicationContext()

        val builder = AntivirusConfig.Builder(context)
                        .smartProtectionConfig(
                            AntivirusConfig.SmartProtectionConfig.Builder()
                                .smartProtectionEnabled(true)
                                .silentModeEnabled(enableSilentMode)
                                .smartProtectionIntervalHours(onlineCheckIntervalHours)
                                .build()
                        )
                        .apiUsername(username)
                        .apiPassword(password)

        val tmBuilder = AntivirusConfig.ThreatMitigationUIConfig.Builder()
        theme?.let { tmBuilder.screenTheme(it) }
        notificationIcon?.let { tmBuilder.notificationSmallIcon(it) }
        builder.threatMitigationUIConfig(tmBuilder.build())

        clientId?.let { builder.clientAppUserId(clientId) }

        val antivirus = Antivirus.getInstance()
        antivirus.initializeAsync(builder.build(), object : Antivirus.InitializationObserver {
            override fun onInitialized() {
                callbackContext.success()
            }
        })
        this.antivirus = antivirus
    }

    fun setClientId(clientId: String?, callbackContext: CallbackContext) {

        if (!this.isInitialized()) {
            callbackContext.error(Error.PLUGIN_NOT_INITIALIZED.name)
            return
        }

        this.antivirus!!.getUpdateManager().updateClientAppUserId(clientId)
        callbackContext.success()
    }

    fun triggerSmartProtection(callbackContext: CallbackContext) {

        val activity = cordova.getActivity()

        if (!this.isInitialized()) {
            callbackContext.error(Error.PLUGIN_NOT_INITIALIZED.name)
            return
        }

        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {
            activity.startService(Intent(activity, SmartProtectionService::class.java))
        } else {
            val jobScheduler = activity.getSystemService(Context.JOB_SCHEDULER_SERVICE) as JobScheduler
            jobScheduler.schedule(
                JobInfo.Builder(
                    905,
                    ComponentName(activity, SmartProtectionJobService::class.java)
                )
                .setMinimumLatency(1)
                .setOverrideDeadline(1)
                .build()
            )
        }

        callbackContext.success()
    }
}
