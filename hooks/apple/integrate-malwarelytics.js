//
// Copyright 2022 Wultra s.r.o.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions
// and limitations under the License.
//

/*
    This hook will parse the malwarelytics.xml file 
    and prepares all necesarry files that are needed for proper
    malwarelytics configuration into the Apple (iOS) platform.
*/

const fs = require("fs");
const os = require('os');
const xml2js = require("xml2js");
const { ConfigParser } = require('cordova-common');

const pluginName = "cordova-plugin-malwarelytics";
const iosPluginName = "MalwarelyticsPlugin";
const swiftConfigFileName = "MalwarelyticsPluginConfiguration.swift";
const malwarelyticsConfigFile = "./malwarelytics.xml"; // integrators configuration xml path
const appConfigFile = "./config.xml"; // cordova app config file path

// main malwarelytics integration function
function integrate() {

    // make esure that the integrator prepared the config file
    if (!fs.existsSync(malwarelyticsConfigFile)) {
        throw `Malwarelytics: Missing configuration file in ${malwarelyticsConfigFile}`;
    }

    // parse the config file and start processing
    const xmlFile = fs.readFileSync(malwarelyticsConfigFile).toString();
    const parser = new xml2js.Parser();
    parser.parseString(xmlFile, (error, config) => {

        // cannot be parsed
        if (error) {
            throw `Malwarelytics: ${error}`;
        }

        if (config.malwarelytics["apple"] == undefined) {
            throw `Malwarelytics: missing <apple> in malwarelytics.xml configuration}`;
        }

        const androidConfig = config.malwarelytics["apple"][0];
        const serviceConfig = androidConfig.service[0].$ || null;
        const artifactoryConfig = androidConfig.artifactory[0].$ || null;

        // login items
        const username = serviceConfig.username || null;
        const password = serviceConfig.password || null;
        const pubKey = serviceConfig.publicKey || null;

        // maven items
        const netrcUrl = artifactoryConfig.url || "wultra.jfrog.io";
        const netrcUser = artifactoryConfig.username || null;
        const netrcPwd = artifactoryConfig.password || null;

        if (netrcUser == null || netrcPwd == null) {
            throw `Malwarelytics: missing Malwarelytics Apple artifactory configuration`;
        }

        const netrcItem = `machine ${netrcUrl} 
  login ${netrcUser}
  password ${netrcPwd}`;

        const netrcFile = os.platform() == "win32" ? "_netrc" : ".netrc";

        const netrcPath = `${os.homedir()}/${netrcFile}`;
        if (fs.existsSync(netrcPath)) {
            var netrcContent = fs.readFileSync(netrcPath).toString();
            if (netrcContent.indexOf(netrcItem) == -1) {
                netrcContent += `\n\n${netrcItem}`;
                fs.writeFileSync(netrcPath, netrcContent);
                console.log(`artifactory credentials appended to ${netrcPath}`)
            } else {
                console.log(`${netrcPath} file already contains artifactory credentials - skipping`)
            }
        } else {
            fs.writeFileSync(netrcPath, netrcItem);
            console.log(`Created ${netrcPath} file with artifactory credentials`)
        }

        // check for mandatory config items
        if (password == null || username == null) {
            throw `Malwarelytics: <service> 'username' or 'password' is not set in config file ${malwarelyticsConfigFile} (the <apple> section).`;
        }

        const content = `// THIS FILE WAS GENERATED BY THE INTEGRATE-MALWARELYTICS SCRIPT

extension MalwarelyticsPlugin {
    static let username = "${username}"
    static let password = "${password}"
    static let pubKey: String? = ${pubKey == null ? "null" : `\"${pubKey}\"`}
}
`;
        const appConfig = new ConfigParser(appConfigFile);
        fs.writeFileSync(`./platforms/ios/${appConfig.name()}/plugins/${pluginName}/${iosPluginName}/${swiftConfigFileName}`, content);
    });
}

let deferral;

module.exports = function(ctx) {
    try {
        deferral = require('q').defer();
        integrate();
        deferral.resolve();
    } catch(e) {
        let msg = e.toString();
        console.dir(e);
        deferral.reject(msg);
        return deferral.promise;
    }
};