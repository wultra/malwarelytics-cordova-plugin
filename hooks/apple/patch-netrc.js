//
// Copyright 2022 Wultra s.r.o.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions
// and limitations under the License.
//

/*
    This hook will parse the malwarelytics.xml file 
    and adds the credentials for the artifactory to the
    $HOME/.netrc or $HOME/_netrc file.
*/

const fs = require("fs");
const os = require('os');
const xml2js = require("xml2js");

const malwarelyticsConfigFile = "./malwarelytics.xml"; // integrators configuration xml path

// patch netrc
function patchNetrc() {

    if (!fs.existsSync(malwarelyticsConfigFile)) {
        throw `Malwarelytics: Missing configuration file in ${malwarelyticsConfigFile}`;
    }

    // parse the config file and start processing
    const xmlFile = fs.readFileSync(malwarelyticsConfigFile).toString();
    const parser = new xml2js.Parser();
    parser.parseString(xmlFile, (error, config) => {

        // cannot be parsed
        if (error) {
            throw `Malwarelytics: ${error}`;
        }

        if (config.malwarelytics["apple"] == undefined) {
            throw `Malwarelytics: missing <apple> in malwarelytics.xml configuration}`;
        }

        const appleConfig = config.malwarelytics["apple"][0];
        const artifactoryConfig = appleConfig.artifactory[0].$ || null;

        // netric items
        const netrcUrl = artifactoryConfig.url || "wultra.jfrog.io";
        const netrcUser = artifactoryConfig.username || null;
        const netrcPwd = artifactoryConfig.password || null;

        if (netrcUser == null || netrcPwd == null) {
            throw `Malwarelytics: missing Malwarelytics Apple artifactory configuration`;
        }

        const netrcItem = `machine ${netrcUrl} 
login ${netrcUser}
password ${netrcPwd}`;

        const netrcFile = os.platform() == "win32" ? "_netrc" : ".netrc";

        const netrcPath = `${os.homedir()}/${netrcFile}`;
        if (fs.existsSync(netrcPath)) {
            var netrcContent = fs.readFileSync(netrcPath).toString();
            if (netrcContent.indexOf(netrcItem) == -1) {
                netrcContent += `\n\n${netrcItem}`;
                fs.writeFileSync(netrcPath, netrcContent);
                console.log(`artifactory credentials appended to ${netrcPath}`)
            } else {
                console.log(`${netrcPath} file already contains artifactory credentials - skipping`)
            }
        } else {
            fs.writeFileSync(netrcPath, netrcItem);
            console.log(`Created ${netrcPath} file with artifactory credentials`)
        }
    });
}

let deferral;

module.exports = function(ctx) {
    try {
        deferral = require('q').defer();
        patchNetrc();
        deferral.resolve();
    } catch(e) {
        let msg = e.toString();
        console.dir(e);
        deferral.reject(msg);
        return deferral.promise;
    }
};