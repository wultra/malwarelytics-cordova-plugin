const fs = require('fs');
const plist = require('plist');
const xml2js = require("xml2js");

const malwarelyticsConfigFile = "./malwarelytics.xml"; // integrators configuration xml path
const plistFilePathPattern = 'platforms/ios/.../...-Info.plist';

function addAppPresenceQueries(ctx) {

    // make esure that the integrator prepared the config file
    if (!fs.existsSync(malwarelyticsConfigFile)) {
        throw `Malwarelytics: Missing configuration file in ${malwarelyticsConfigFile}`;
    }

    console.log("Processing the hook");

    // parse the config file and start processing
    const xmlFile = fs.readFileSync(malwarelyticsConfigFile).toString();
    const parser = new xml2js.Parser();

    const projectName = getProjectName(ctx);

    parser.parseString(xmlFile, (error, config) => {

        // cannot be parsed
        if (error) {
            throw `Malwarelytics: ${error}`;
        }

        if (config.malwarelytics["apple"] == undefined) {
            throw `Malwarelytics: missing <apple> in malwarelytics.xml configuration}`;
        }

        const appleConfig = config.malwarelytics["apple"][0];
        const appleRasp = appleConfig.rasp?.[0] || null;
        const appPresenceQueries = appleRasp?.appPresenceQueries?.[0] || null;
        const appPresenceStrings = appPresenceQueries?.["string"] || [];

        if (appPresenceStrings.length == 0) {
            console.log("appPresenceQueries are empty");
            return;
        }


        const plistFilePath = plistFilePathPattern.replaceAll('...', projectName);
        var plistFile = fs.readFileSync(plistFilePath, 'utf8');
        const plistObj = plist.parse(plistFile);

        const schemes = [];

        for (const query of appPresenceStrings) {
            console.log("query: " + query);
            schemes.push(query);
        }

        plistObj.LSApplicationQueriesSchemes = schemes;
        plistFile = plist.build(plistObj);
        fs.writeFileSync(plistFilePath, plistFile, { encoding: 'utf8' });
    });
}

function getProjectName(ctx) {
    // const path = require('path');
    // const configXml = path.join(context.opts.projectRoot, 'config.xml');
    // const data = fs.readFileSync(configXml).toString();
    // const parser = new xml2js.Parser();
    // var appName = "";
    // parser.parseStringPromise(configXml)
    // .then(function (widget) {
    //     const name  = widget?.['name'][0] || null;
    // })
    // .catch(function (err) {
    //     throw `Malwarelytics: ${err}`;
    // });
    // const et = context.requireCordovaModule('elementtree');

    
    // const etree = et.parse(data);
    // const appName = etree.getroot().find('name')['text'];
    // return appName;
    return "MalwarelyticsPluginTest";
}

let deferral;

module.exports = function(ctx) {
    // for (var key in ctx) {
    //     console.log("key is: " + key);
    // }
    // for (var key in ctx.opts) {
    //     console.log("opts.key is: " + key);
    // }
    // if (!ctx.opts.platforms.includes('ios')) {
    //     console.log("Missing ios in build, cannot apply hook");
    //     return;
    // }
    // return new Promise(resolve => {
    //     addAppPresenceQueries();
    // });
    try {
        deferral = require('q').defer();
        addAppPresenceQueries(ctx);
        deferral.resolve();
    } catch(e) {
        let msg = e.toString();
        console.dir(e);
        deferral.reject(msg);
        return deferral.promise;
    }
};