const fs = require('fs');
const plist = require('plist');
const xml2js = require("xml2js");

const malwarelyticsConfigFile = "./malwarelytics.xml"; // integrators configuration xml path
const plistFilePathPattern = 'platforms/ios/.../...-Info.plist';

function addAppPresenceQueries(ctx) {
    // make esure that the integrator prepared the config file
    if (!fs.existsSync(malwarelyticsConfigFile)) {
        throw `Malwarelytics: Missing configuration file in ${malwarelyticsConfigFile}`;
    }

    // parse the config file and start processing
    const xmlFile = fs.readFileSync(malwarelyticsConfigFile).toString();
    const parser = new xml2js.Parser();

    const projectNamePromise = getProjectName(ctx);
    const obtainSchemesPromise = parser.parseStringPromise(xmlFile)
        .then((config) => {
            if (config.malwarelytics["apple"] == undefined) {
                throw `Missing <apple> in malwarelytics.xml configuration}`;
            }

            const appleConfig = config.malwarelytics["apple"][0];
            const appleRasp = appleConfig.rasp?.[0] || null;
            const appPresenceQueries = appleRasp?.appPresenceQueries?.[0] || null;
            const appPresenceStrings = appPresenceQueries?.["string"] || [];

            if (appPresenceStrings.length == 0) {
                console.log("Malwarelytics: appPresenceQueries are empty");
                return [];
            }

            return appPresenceStrings.slice();
        });
    
    return Promise.allSettled([projectNamePromise, obtainSchemesPromise])
        .then((results) => {
            if (results.some(r => r.status !== 'fulfilled')) {
                throw `Malwarelytics failed to process appPresence queries`;
            }
            const projectName = results[0].value;
            const schemes = results[1].value;

            const plistFilePath = plistFilePathPattern.replaceAll('...', projectName);
            var plistFile = fs.readFileSync(plistFilePath, 'utf8');
            const plistObj = plist.parse(plistFile);

            // add queries to Info.plist
            plistObj.LSApplicationQueriesSchemes = schemes;
            plistFile = plist.build(plistObj);
            fs.writeFileSync(plistFilePath, plistFile, { encoding: 'utf8' });
        });
}

function getProjectName(ctx) {
    const path = require('path');
    const configXml = path.join(ctx.opts.projectRoot, 'config.xml');
    const xmlData = fs.readFileSync(configXml).toString();
    const parser = new xml2js.Parser();

    return parser.parseStringPromise(xmlData)
        .then(function (result) {
            return result.widget.name;
        })
}

module.exports = function(ctx) {
    return addAppPresenceQueries(ctx)
        .then(() => console.log("Malwarelytics: Successfully added appPresence queries.") )
        .catch((error) => console.log(`Malwarelytics: Failed to add appPresence queries: ${error}`))
}