const fs = require("fs");
const xml2js = require("xml2js");
const path = require("path");

const configClassName = "MalwarelyticsConfig";
const configPackage = "com.wultra.android.cordova.malwarelytics.plugin";
const configPath = "./platforms/android/app/src/main/java/" + configPackage.split(".").join("/");
const configFile = `${configPath}/${configClassName}.kt`;
const appResFolder = "./platforms/android/app/src/main/res/";
const malwarelyticsConfigFile = "./malwarelytics.xml";
const appConfigFile = "./config.xml";

let deferral;

function copyResources(dirPath, rootPath) {
    
    const files = fs.readdirSync(dirPath);

    files.forEach(file => {
        const filePath = dirPath + "/" + file;
        if (fs.statSync(filePath).isDirectory()) {
            copyResources(filePath, rootPath || dirPath);
        } else {
            let dest = appResFolder + filePath.replace(rootPath + "/", "");
            fs.mkdirSync(appResFolder + "/" + dirPath.replace(rootPath, ""), { recursive: true});
            fs.copyFile(filePath, dest, error => {
                if (error) {
                    throw `Malwarelytics: failed to copy custom resource file: ${error}`;
                } else {
                    console.log(`Resource copied to the destiantion ${dest}`);
                }
            });
        }
    })
}

function integrate() {

    if (!fs.existsSync(appConfigFile)) {
        throw "Missing apps config.xml file";
    }

    const parser = new xml2js.Parser();
    let appBundle = null;

    // first parse the config file to get app bundle
    const appConfigXmlFile = fs.readFileSync(appConfigFile).toString();
    parser.parseString(appConfigXmlFile, (error, appConfig) => {
        
        // cannot be parsed
        if (error) {
            throw `Malwarelytics: ${error}`;
        }

        appBundle = appConfig.widget.$.id || null;

        if (appBundle == null) {
            throw "App bundle cannot be obtained.";
        }
    });

    // make esure that the integrator prepared the config file
    if (!fs.existsSync(malwarelyticsConfigFile)) {
        throw `Malwarelytics: Missing configuration file in ${malwarelyticsConfigFile}`;
    }

    // parse the config file and start processing
    const xmlFile = fs.readFileSync(malwarelyticsConfigFile).toString();
    parser.parseString(xmlFile, (error, config) => {
        
        // cannot be parsed
        if (error) {
            throw `Malwarelytics: ${error}`;
        }

        let username = config.malwarelytics["username"] || null;
        let password = config.malwarelytics["password"] || null;
        let theme = config.malwarelytics["theme"] || null;
        let notificationIcon = config.malwarelytics["notification-icon"] || null;
        let resourceFolder = config.malwarelytics["resources-folder"] || null;
        if (theme != null) {
            theme = `${appBundle}.${theme}`
        }
        if (notificationIcon != null) {
            notificationIcon = `${appBundle}.${notificationIcon}`
        }
        let aarPath = (config.malwarelytics["library-path"]) || null;

        // copy the native (android) library
        if (aarPath != null) {
            const libFolder = "./platforms/android/app/libs/";
            fs.mkdirSync(libFolder, { recursive: true });
            fs.copyFile(aarPath[0], libFolder + "antivirus.aar", error => {
                if (error) {
                    throw `Malwarelytics: failed to copy library file: ${error}`;
                }
            });
        } else {
            throw `Malwarelytics: missing path to native library inside the config file`;
        }

        // check for mandatory config items
        if (password == null || username == null) {
            throw `Malwarelytics: 'username' or 'password' is not set in config file ${malwarelyticsConfigFile}`;
        }

        // prepare the contents of the kotlin file
        const content = `package ${configPackage}

class ${configClassName} {

    companion object {
        const val USER_NAME = "${username}"
        const val PASSWORD = "${password}"
        val THEME: Int? = ${theme}
        val NOTIFICATION_ICON: Int? = ${notificationIcon}
    }
}`;

        // write the contents of the file
        fs.writeFile(configFile, content, function(error) {
            if (error) {
                throw `Malwarelytics: failed to generate config file: ${error}`;
            } else {
                console.log("Malwarelytics: credentials file generated")
            }
        });

        if (resourceFolder != null) {
            copyResources(resourceFolder[0]);
        }
    });
}


module.exports = function(ctx) {
    try {
        deferral = require('q').defer();
        integrate();
        deferral.resolve();
    } catch(e) {
        let msg = e.toString();
        console.dir(e);
        deferral.reject(msg);
        return deferral.promise;
    }
};